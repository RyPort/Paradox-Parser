// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.6.1
// source: steammessages_publishedfile.steamworkssdk.proto

package deadlock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CPublishedFile_Subscribe_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32                `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32                 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool                  `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Subscribe_Request) Reset() {
	*x = CPublishedFile_Subscribe_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Subscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

func (x *CPublishedFile_Subscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Subscribe_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Subscribe_Response) Reset() {
	*x = CPublishedFile_Subscribe_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Subscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Unsubscribe_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32                `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32                 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool                  `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Unsubscribe_Request) Reset() {
	*x = CPublishedFile_Unsubscribe_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Unsubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CPublishedFile_Unsubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Unsubscribe_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Unsubscribe_Response) Reset() {
	*x = CPublishedFile_Unsubscribe_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Unsubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

type CPublishedFile_Publish_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Appid                *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ConsumerAppid        *uint32                `protobuf:"varint,2,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	Cloudfilename        *string                `protobuf:"bytes,3,opt,name=cloudfilename" json:"cloudfilename,omitempty"`
	PreviewCloudfilename *string                `protobuf:"bytes,4,opt,name=preview_cloudfilename,json=previewCloudfilename" json:"preview_cloudfilename,omitempty"`
	Title                *string                `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	FileDescription      *string                `protobuf:"bytes,6,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	FileType             *uint32                `protobuf:"varint,7,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	ConsumerShortcutName *string                `protobuf:"bytes,8,opt,name=consumer_shortcut_name,json=consumerShortcutName" json:"consumer_shortcut_name,omitempty"`
	YoutubeUsername      *string                `protobuf:"bytes,9,opt,name=youtube_username,json=youtubeUsername" json:"youtube_username,omitempty"`
	YoutubeVideoid       *string                `protobuf:"bytes,10,opt,name=youtube_videoid,json=youtubeVideoid" json:"youtube_videoid,omitempty"`
	Visibility           *uint32                `protobuf:"varint,11,opt,name=visibility" json:"visibility,omitempty"`
	RedirectUri          *string                `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	Tags                 []string               `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	CollectionType       *string                `protobuf:"bytes,14,opt,name=collection_type,json=collectionType" json:"collection_type,omitempty"`
	GameType             *string                `protobuf:"bytes,15,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Url                  *string                `protobuf:"bytes,16,opt,name=url" json:"url,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_Publish_Request) Reset() {
	*x = CPublishedFile_Publish_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Publish_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Request) ProtoMessage() {}

func (x *CPublishedFile_Publish_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CPublishedFile_Publish_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetCloudfilename() string {
	if x != nil && x.Cloudfilename != nil {
		return *x.Cloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetPreviewCloudfilename() string {
	if x != nil && x.PreviewCloudfilename != nil {
		return *x.PreviewCloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerShortcutName() string {
	if x != nil && x.ConsumerShortcutName != nil {
		return *x.ConsumerShortcutName
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeUsername() string {
	if x != nil && x.YoutubeUsername != nil {
		return *x.YoutubeUsername
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeVideoid() string {
	if x != nil && x.YoutubeVideoid != nil {
		return *x.YoutubeVideoid
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Publish_Request) GetCollectionType() string {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CPublishedFile_Publish_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	RedirectUri     *string                `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Publish_Response) Reset() {
	*x = CPublishedFile_Publish_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Publish_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Response) ProtoMessage() {}

func (x *CPublishedFile_Publish_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CPublishedFile_Publish_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Publish_Response) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

type CPublishedFile_GetDetails_Request struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileids          []uint64               `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Includetags               *bool                  `protobuf:"varint,2,opt,name=includetags" json:"includetags,omitempty"`
	Includeadditionalpreviews *bool                  `protobuf:"varint,3,opt,name=includeadditionalpreviews" json:"includeadditionalpreviews,omitempty"`
	Includechildren           *bool                  `protobuf:"varint,4,opt,name=includechildren" json:"includechildren,omitempty"`
	Includekvtags             *bool                  `protobuf:"varint,5,opt,name=includekvtags" json:"includekvtags,omitempty"`
	Includevotes              *bool                  `protobuf:"varint,6,opt,name=includevotes" json:"includevotes,omitempty"`
	ShortDescription          *bool                  `protobuf:"varint,8,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CPublishedFile_GetDetails_Request) Reset() {
	*x = CPublishedFile_GetDetails_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Request) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CPublishedFile_GetDetails_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_GetDetails_Request) GetIncludetags() bool {
	if x != nil && x.Includetags != nil {
		return *x.Includetags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeadditionalpreviews() bool {
	if x != nil && x.Includeadditionalpreviews != nil {
		return *x.Includeadditionalpreviews
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludechildren() bool {
	if x != nil && x.Includechildren != nil {
		return *x.Includechildren
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludekvtags() bool {
	if x != nil && x.Includekvtags != nil {
		return *x.Includekvtags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludevotes() bool {
	if x != nil && x.Includevotes != nil {
		return *x.Includevotes
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetShortDescription() bool {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return false
}

type PublishedFileDetails struct {
	state                 protoimpl.MessageState          `protogen:"open.v1"`
	Result                *uint32                         `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Publishedfileid       *uint64                         `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Creator               *uint64                         `protobuf:"fixed64,3,opt,name=creator" json:"creator,omitempty"`
	CreatorAppid          *uint32                         `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	ConsumerAppid         *uint32                         `protobuf:"varint,5,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	ConsumerShortcutid    *uint32                         `protobuf:"varint,6,opt,name=consumer_shortcutid,json=consumerShortcutid" json:"consumer_shortcutid,omitempty"`
	Filename              *string                         `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	FileSize              *uint64                         `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	PreviewFileSize       *uint64                         `protobuf:"varint,9,opt,name=preview_file_size,json=previewFileSize" json:"preview_file_size,omitempty"`
	FileUrl               *string                         `protobuf:"bytes,10,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	PreviewUrl            *string                         `protobuf:"bytes,11,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	Youtubevideoid        *string                         `protobuf:"bytes,12,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	Url                   *string                         `protobuf:"bytes,13,opt,name=url" json:"url,omitempty"`
	HcontentFile          *uint64                         `protobuf:"fixed64,14,opt,name=hcontent_file,json=hcontentFile" json:"hcontent_file,omitempty"`
	HcontentPreview       *uint64                         `protobuf:"fixed64,15,opt,name=hcontent_preview,json=hcontentPreview" json:"hcontent_preview,omitempty"`
	Title                 *string                         `protobuf:"bytes,16,opt,name=title" json:"title,omitempty"`
	FileDescription       *string                         `protobuf:"bytes,17,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	ShortDescription      *string                         `protobuf:"bytes,18,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	TimeCreated           *uint32                         `protobuf:"varint,19,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated           *uint32                         `protobuf:"varint,20,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Visibility            *uint32                         `protobuf:"varint,21,opt,name=visibility" json:"visibility,omitempty"`
	Flags                 *uint32                         `protobuf:"varint,22,opt,name=flags" json:"flags,omitempty"`
	WorkshopFile          *bool                           `protobuf:"varint,23,opt,name=workshop_file,json=workshopFile" json:"workshop_file,omitempty"`
	WorkshopAccepted      *bool                           `protobuf:"varint,24,opt,name=workshop_accepted,json=workshopAccepted" json:"workshop_accepted,omitempty"`
	ShowSubscribeAll      *bool                           `protobuf:"varint,25,opt,name=show_subscribe_all,json=showSubscribeAll" json:"show_subscribe_all,omitempty"`
	NumCommentsDeveloper  *int32                          `protobuf:"varint,26,opt,name=num_comments_developer,json=numCommentsDeveloper" json:"num_comments_developer,omitempty"`
	NumCommentsPublic     *int32                          `protobuf:"varint,27,opt,name=num_comments_public,json=numCommentsPublic" json:"num_comments_public,omitempty"`
	Banned                *bool                           `protobuf:"varint,28,opt,name=banned" json:"banned,omitempty"`
	BanReason             *string                         `protobuf:"bytes,29,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	Banner                *uint64                         `protobuf:"fixed64,30,opt,name=banner" json:"banner,omitempty"`
	CanBeDeleted          *bool                           `protobuf:"varint,31,opt,name=can_be_deleted,json=canBeDeleted" json:"can_be_deleted,omitempty"`
	Incompatible          *bool                           `protobuf:"varint,32,opt,name=incompatible" json:"incompatible,omitempty"`
	AppName               *string                         `protobuf:"bytes,33,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	FileType              *uint32                         `protobuf:"varint,34,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	CanSubscribe          *bool                           `protobuf:"varint,35,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
	Subscriptions         *uint32                         `protobuf:"varint,36,opt,name=subscriptions" json:"subscriptions,omitempty"`
	Favorited             *uint32                         `protobuf:"varint,37,opt,name=favorited" json:"favorited,omitempty"`
	Followers             *uint32                         `protobuf:"varint,38,opt,name=followers" json:"followers,omitempty"`
	LifetimeSubscriptions *uint32                         `protobuf:"varint,39,opt,name=lifetime_subscriptions,json=lifetimeSubscriptions" json:"lifetime_subscriptions,omitempty"`
	LifetimeFavorited     *uint32                         `protobuf:"varint,40,opt,name=lifetime_favorited,json=lifetimeFavorited" json:"lifetime_favorited,omitempty"`
	LifetimeFollowers     *uint32                         `protobuf:"varint,41,opt,name=lifetime_followers,json=lifetimeFollowers" json:"lifetime_followers,omitempty"`
	Views                 *uint32                         `protobuf:"varint,42,opt,name=views" json:"views,omitempty"`
	ImageWidth            *uint32                         `protobuf:"varint,43,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight           *uint32                         `protobuf:"varint,44,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	ImageUrl              *string                         `protobuf:"bytes,45,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	SpoilerTag            *bool                           `protobuf:"varint,46,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	Shortcutid            *uint32                         `protobuf:"varint,47,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Shortcutname          *string                         `protobuf:"bytes,48,opt,name=shortcutname" json:"shortcutname,omitempty"`
	NumChildren           *uint32                         `protobuf:"varint,49,opt,name=num_children,json=numChildren" json:"num_children,omitempty"`
	NumReports            *uint32                         `protobuf:"varint,50,opt,name=num_reports,json=numReports" json:"num_reports,omitempty"`
	Previews              []*PublishedFileDetails_Preview `protobuf:"bytes,51,rep,name=previews" json:"previews,omitempty"`
	Tags                  []*PublishedFileDetails_Tag     `protobuf:"bytes,52,rep,name=tags" json:"tags,omitempty"`
	Children              []*PublishedFileDetails_Child   `protobuf:"bytes,53,rep,name=children" json:"children,omitempty"`
	Kvtags                []*PublishedFileDetails_KVTag   `protobuf:"bytes,54,rep,name=kvtags" json:"kvtags,omitempty"`
	VoteData              *PublishedFileDetails_VoteData  `protobuf:"bytes,55,opt,name=vote_data,json=voteData" json:"vote_data,omitempty"`
	TimeSubscribed        *uint32                         `protobuf:"varint,56,opt,name=time_subscribed,json=timeSubscribed" json:"time_subscribed,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishedFileDetails) Reset() {
	*x = PublishedFileDetails{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails) ProtoMessage() {}

func (x *PublishedFileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *PublishedFileDetails) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *PublishedFileDetails) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

func (x *PublishedFileDetails) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerShortcutid() uint32 {
	if x != nil && x.ConsumerShortcutid != nil {
		return *x.ConsumerShortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviewFileSize() uint64 {
	if x != nil && x.PreviewFileSize != nil {
		return *x.PreviewFileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetFileUrl() string {
	if x != nil && x.FileUrl != nil {
		return *x.FileUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails) GetHcontentFile() uint64 {
	if x != nil && x.HcontentFile != nil {
		return *x.HcontentFile
	}
	return 0
}

func (x *PublishedFileDetails) GetHcontentPreview() uint64 {
	if x != nil && x.HcontentPreview != nil {
		return *x.HcontentPreview
	}
	return 0
}

func (x *PublishedFileDetails) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PublishedFileDetails) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *PublishedFileDetails) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *PublishedFileDetails) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *PublishedFileDetails) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *PublishedFileDetails) GetWorkshopFile() bool {
	if x != nil && x.WorkshopFile != nil {
		return *x.WorkshopFile
	}
	return false
}

func (x *PublishedFileDetails) GetWorkshopAccepted() bool {
	if x != nil && x.WorkshopAccepted != nil {
		return *x.WorkshopAccepted
	}
	return false
}

func (x *PublishedFileDetails) GetShowSubscribeAll() bool {
	if x != nil && x.ShowSubscribeAll != nil {
		return *x.ShowSubscribeAll
	}
	return false
}

func (x *PublishedFileDetails) GetNumCommentsDeveloper() int32 {
	if x != nil && x.NumCommentsDeveloper != nil {
		return *x.NumCommentsDeveloper
	}
	return 0
}

func (x *PublishedFileDetails) GetNumCommentsPublic() int32 {
	if x != nil && x.NumCommentsPublic != nil {
		return *x.NumCommentsPublic
	}
	return 0
}

func (x *PublishedFileDetails) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *PublishedFileDetails) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

func (x *PublishedFileDetails) GetBanner() uint64 {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return 0
}

func (x *PublishedFileDetails) GetCanBeDeleted() bool {
	if x != nil && x.CanBeDeleted != nil {
		return *x.CanBeDeleted
	}
	return false
}

func (x *PublishedFileDetails) GetIncompatible() bool {
	if x != nil && x.Incompatible != nil {
		return *x.Incompatible
	}
	return false
}

func (x *PublishedFileDetails) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *PublishedFileDetails) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *PublishedFileDetails) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

func (x *PublishedFileDetails) GetSubscriptions() uint32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetFavorited() uint32 {
	if x != nil && x.Favorited != nil {
		return *x.Favorited
	}
	return 0
}

func (x *PublishedFileDetails) GetFollowers() uint32 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeSubscriptions() uint32 {
	if x != nil && x.LifetimeSubscriptions != nil {
		return *x.LifetimeSubscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFavorited() uint32 {
	if x != nil && x.LifetimeFavorited != nil {
		return *x.LifetimeFavorited
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFollowers() uint32 {
	if x != nil && x.LifetimeFollowers != nil {
		return *x.LifetimeFollowers
	}
	return 0
}

func (x *PublishedFileDetails) GetViews() uint32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *PublishedFileDetails) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *PublishedFileDetails) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *PublishedFileDetails) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *PublishedFileDetails) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetShortcutname() string {
	if x != nil && x.Shortcutname != nil {
		return *x.Shortcutname
	}
	return ""
}

func (x *PublishedFileDetails) GetNumChildren() uint32 {
	if x != nil && x.NumChildren != nil {
		return *x.NumChildren
	}
	return 0
}

func (x *PublishedFileDetails) GetNumReports() uint32 {
	if x != nil && x.NumReports != nil {
		return *x.NumReports
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviews() []*PublishedFileDetails_Preview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *PublishedFileDetails) GetTags() []*PublishedFileDetails_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublishedFileDetails) GetChildren() []*PublishedFileDetails_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PublishedFileDetails) GetKvtags() []*PublishedFileDetails_KVTag {
	if x != nil {
		return x.Kvtags
	}
	return nil
}

func (x *PublishedFileDetails) GetVoteData() *PublishedFileDetails_VoteData {
	if x != nil {
		return x.VoteData
	}
	return nil
}

func (x *PublishedFileDetails) GetTimeSubscribed() uint32 {
	if x != nil && x.TimeSubscribed != nil {
		return *x.TimeSubscribed
	}
	return 0
}

type CPublishedFile_GetDetails_Response struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,1,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_GetDetails_Response) Reset() {
	*x = CPublishedFile_GetDetails_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Response) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

func (x *CPublishedFile_GetDetails_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

type CPublishedFile_GetUserFiles_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Page          *uint32                `protobuf:"varint,3,opt,name=page,def=1" json:"page,omitempty"`
	Numperpage    *uint32                `protobuf:"varint,4,opt,name=numperpage,def=1" json:"numperpage,omitempty"`
	Sortmethod    *string                `protobuf:"bytes,6,opt,name=sortmethod,def=lastupdated" json:"sortmethod,omitempty"`
	Totalonly     *bool                  `protobuf:"varint,7,opt,name=totalonly" json:"totalonly,omitempty"`
	Privacy       *uint32                `protobuf:"varint,9,opt,name=privacy" json:"privacy,omitempty"`
	IdsOnly       *bool                  `protobuf:"varint,10,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	Requiredtags  []string               `protobuf:"bytes,11,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags  []string               `protobuf:"bytes,12,rep,name=excludedtags" json:"excludedtags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CPublishedFile_GetUserFiles_Request fields.
const (
	Default_CPublishedFile_GetUserFiles_Request_Page       = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Numperpage = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Sortmethod = string("lastupdated")
)

func (x *CPublishedFile_GetUserFiles_Request) Reset() {
	*x = CPublishedFile_GetUserFiles_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{9}
}

func (x *CPublishedFile_GetUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_CPublishedFile_GetUserFiles_Request_Page
}

func (x *CPublishedFile_GetUserFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return Default_CPublishedFile_GetUserFiles_Request_Numperpage
}

func (x *CPublishedFile_GetUserFiles_Request) GetSortmethod() string {
	if x != nil && x.Sortmethod != nil {
		return *x.Sortmethod
	}
	return Default_CPublishedFile_GetUserFiles_Request_Sortmethod
}

func (x *CPublishedFile_GetUserFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetPrivacy() uint32 {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

type CPublishedFile_GetUserFiles_Response struct {
	state                protoimpl.MessageState                      `protogen:"open.v1"`
	Total                *uint32                                     `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Startindex           *uint32                                     `protobuf:"varint,2,opt,name=startindex" json:"startindex,omitempty"`
	Publishedfiledetails []*PublishedFileDetails                     `protobuf:"bytes,3,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	Apps                 []*CPublishedFile_GetUserFiles_Response_App `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Response) Reset() {
	*x = CPublishedFile_GetUserFiles_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{10}
}

func (x *CPublishedFile_GetUserFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Response) GetApps() []*CPublishedFile_GetUserFiles_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CPublishedFile_Update_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileid *uint64                `protobuf:"fixed64,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Title           *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FileDescription *string                `protobuf:"bytes,4,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	Visibility      *uint32                `protobuf:"varint,5,opt,name=visibility" json:"visibility,omitempty"`
	Tags            []string               `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Filename        *string                `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	PreviewFilename *string                `protobuf:"bytes,8,opt,name=preview_filename,json=previewFilename" json:"preview_filename,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPublishedFile_Update_Request) Reset() {
	*x = CPublishedFile_Update_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Update_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Request) ProtoMessage() {}

func (x *CPublishedFile_Update_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{11}
}

func (x *CPublishedFile_Update_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Update_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetPreviewFilename() string {
	if x != nil && x.PreviewFilename != nil {
		return *x.PreviewFilename
	}
	return ""
}

type CPublishedFile_Update_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_Update_Response) Reset() {
	*x = CPublishedFile_Update_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_Update_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Response) ProtoMessage() {}

func (x *CPublishedFile_Update_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{12}
}

type CPublishedFile_RefreshVotingQueue_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	MatchingFileType *uint32                `protobuf:"varint,2,opt,name=matching_file_type,json=matchingFileType" json:"matching_file_type,omitempty"`
	Tags             []string               `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	MatchAllTags     *bool                  `protobuf:"varint,4,opt,name=match_all_tags,json=matchAllTags,def=1" json:"match_all_tags,omitempty"`
	ExcludedTags     []string               `protobuf:"bytes,5,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	DesiredQueueSize *uint32                `protobuf:"varint,6,opt,name=desired_queue_size,json=desiredQueueSize" json:"desired_queue_size,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CPublishedFile_RefreshVotingQueue_Request fields.
const (
	Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags = bool(true)
)

func (x *CPublishedFile_RefreshVotingQueue_Request) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Request{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RefreshVotingQueue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Request) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{13}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredQueueSize() uint32 {
	if x != nil && x.DesiredQueueSize != nil {
		return *x.DesiredQueueSize
	}
	return 0
}

type CPublishedFile_RefreshVotingQueue_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_RefreshVotingQueue_Response) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Response{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_RefreshVotingQueue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Response) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{14}
}

type PublishedFileDetails_Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           *string                `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Adminonly     *bool                  `protobuf:"varint,2,opt,name=adminonly" json:"adminonly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_Tag) Reset() {
	*x = PublishedFileDetails_Tag{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Tag) ProtoMessage() {}

func (x *PublishedFileDetails_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Tag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PublishedFileDetails_Tag) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *PublishedFileDetails_Tag) GetAdminonly() bool {
	if x != nil && x.Adminonly != nil {
		return *x.Adminonly
	}
	return false
}

type PublishedFileDetails_Preview struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Previewid      *uint64                `protobuf:"varint,1,opt,name=previewid" json:"previewid,omitempty"`
	Sortorder      *uint32                `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	Url            *string                `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Size           *uint32                `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Filename       *string                `protobuf:"bytes,5,opt,name=filename" json:"filename,omitempty"`
	Youtubevideoid *string                `protobuf:"bytes,6,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishedFileDetails_Preview) Reset() {
	*x = PublishedFileDetails_Preview{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Preview) ProtoMessage() {}

func (x *PublishedFileDetails_Preview) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Preview.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Preview) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 1}
}

func (x *PublishedFileDetails_Preview) GetPreviewid() uint64 {
	if x != nil && x.Previewid != nil {
		return *x.Previewid
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

type PublishedFileDetails_Child struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Sortorder       *uint32                `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	FileType        *uint32                `protobuf:"varint,3,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PublishedFileDetails_Child) Reset() {
	*x = PublishedFileDetails_Child{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Child) ProtoMessage() {}

func (x *PublishedFileDetails_Child) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Child.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Child) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 2}
}

func (x *PublishedFileDetails_Child) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

type PublishedFileDetails_KVTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_KVTag) Reset() {
	*x = PublishedFileDetails_KVTag{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_KVTag) ProtoMessage() {}

func (x *PublishedFileDetails_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_KVTag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 3}
}

func (x *PublishedFileDetails_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PublishedFileDetails_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PublishedFileDetails_VoteData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Score         *float32               `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
	VotesUp       *uint32                `protobuf:"varint,2,opt,name=votes_up,json=votesUp" json:"votes_up,omitempty"`
	VotesDown     *uint32                `protobuf:"varint,3,opt,name=votes_down,json=votesDown" json:"votes_down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishedFileDetails_VoteData) Reset() {
	*x = PublishedFileDetails_VoteData{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishedFileDetails_VoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_VoteData) ProtoMessage() {}

func (x *PublishedFileDetails_VoteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_VoteData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_VoteData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{7, 4}
}

func (x *PublishedFileDetails_VoteData) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesUp() uint32 {
	if x != nil && x.VotesUp != nil {
		return *x.VotesUp
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesDown() uint32 {
	if x != nil && x.VotesDown != nil {
		return *x.VotesDown
	}
	return 0
}

type CPublishedFile_GetUserFiles_Response_App struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Shortcutid    *uint32                `protobuf:"varint,3,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Private       *bool                  `protobuf:"varint,4,opt,name=private" json:"private,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPublishedFile_GetUserFiles_Response_App) Reset() {
	*x = CPublishedFile_GetUserFiles_Response_App{}
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPublishedFile_GetUserFiles_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response_App) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamworkssdk_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response_App.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response_App) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

var File_steammessages_publishedfile_steamworkssdk_proto protoreflect.FileDescriptor

const file_steammessages_publishedfile_steamworkssdk_proto_rawDesc = "" +
	"\n" +
	"/steammessages_publishedfile.steamworkssdk.proto\x12\bdeadlock\x1a.steammessages_unified_base.steamworkssdk.proto\"\xa4\x01\n" +
	" CPublishedFile_Subscribe_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1b\n" +
	"\tlist_type\x18\x02 \x01(\rR\blistType\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\x05R\x05appid\x12#\n" +
	"\rnotify_client\x18\x04 \x01(\bR\fnotifyClient\"#\n" +
	"!CPublishedFile_Subscribe_Response\"\xa6\x01\n" +
	"\"CPublishedFile_Unsubscribe_Request\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1b\n" +
	"\tlist_type\x18\x02 \x01(\rR\blistType\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\x05R\x05appid\x12#\n" +
	"\rnotify_client\x18\x04 \x01(\bR\fnotifyClient\"%\n" +
	"#CPublishedFile_Unsubscribe_Response\"\x9e\f\n" +
	"\x1eCPublishedFile_Publish_Request\x12C\n" +
	"\x05appid\x18\x01 \x01(\rB-\x82\xb5\x18)App Id this file is being published FROM.R\x05appid\x12R\n" +
	"\x0econsumer_appid\x18\x02 \x01(\rB+\x82\xb5\x18'App Id this file is being published TO.R\rconsumerAppid\x12Z\n" +
	"\rcloudfilename\x18\x03 \x01(\tB4\x82\xb5\x180Name of the file to publish in the user's cloud.R\rcloudfilename\x12q\n" +
	"\x15preview_cloudfilename\x18\x04 \x01(\tB<\x82\xb5\x188Name of the file to use as the published file's preview.R\x14previewCloudfilename\x12<\n" +
	"\x05title\x18\x05 \x01(\tB&\x82\xb5\x18\"Text title for the published file.R\x05title\x12W\n" +
	"\x10file_description\x18\x06 \x01(\tB,\x82\xb5\x18(Text description for the published file.R\x0ffileDescription\x12V\n" +
	"\tfile_type\x18\a \x01(\rB9\x82\xb5\x185(EWorkshopFileType) Type of Workshop file to publish.R\bfileType\x12_\n" +
	"\x16consumer_shortcut_name\x18\b \x01(\tB)\x82\xb5\x18%Shortcut name for the published file.R\x14consumerShortcutName\x12Z\n" +
	"\x10youtube_username\x18\t \x01(\tB/\x82\xb5\x18+(Optional) User's YouTube account username.R\x0fyoutubeUsername\x12l\n" +
	"\x0fyoutube_videoid\x18\n" +
	" \x01(\tBC\x82\xb5\x18?(Optional) Video Id of a YouTube video for this published file.R\x0eyoutubeVideoid\x12\x8d\x01\n" +
	"\n" +
	"visibility\x18\v \x01(\rBm\x82\xb5\x18i(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)R\n" +
	"visibility\x12x\n" +
	"\fredirect_uri\x18\f \x01(\tBU\x82\xb5\x18Q(Optional) If supplied, the resulting published file's Id is appended to the URI.R\vredirectUri\x12J\n" +
	"\x04tags\x18\r \x03(\tB6\x82\xb5\x182Array of text tags to apply to the published file.R\x04tags\x12i\n" +
	"\x0fcollection_type\x18\x0e \x01(\tB@\x82\xb5\x18<(Optional) Type of collection the published file represents.R\x0ecollectionType\x12W\n" +
	"\tgame_type\x18\x0f \x01(\tB:\x82\xb5\x186(Optional) Type of game the published file represents.R\bgameType\x12`\n" +
	"\x03url\x18\x10 \x01(\tBN\x82\xb5\x18J(Optional) If this represents a game, this is the URL to that game's page.R\x03url\"n\n" +
	"\x1fCPublishedFile_Publish_Response\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12!\n" +
	"\fredirect_uri\x18\x02 \x01(\tR\vredirectUri\"\xfe\x05\n" +
	"!CPublishedFile_GetDetails_Request\x12b\n" +
	"\x10publishedfileids\x18\x01 \x03(\x06B6\x82\xb5\x182Set of published file Ids to retrieve details for.R\x10publishedfileids\x12^\n" +
	"\vincludetags\x18\x02 \x01(\bB<\x82\xb5\x188If true, return tag information in the returned details.R\vincludetags\x12~\n" +
	"\x19includeadditionalpreviews\x18\x03 \x01(\bB@\x82\xb5\x18<If true, return preview information in the returned details.R\x19includeadditionalpreviews\x12_\n" +
	"\x0fincludechildren\x18\x04 \x01(\bB5\x82\xb5\x181If true, return children in the returned details.R\x0fincludechildren\x12a\n" +
	"\rincludekvtags\x18\x05 \x01(\bB;\x82\xb5\x187If true, return key value tags in the returned details.R\rincludekvtags\x12Z\n" +
	"\fincludevotes\x18\x06 \x01(\bB6\x82\xb5\x182If true, return vote data in the returned details.R\fincludevotes\x12u\n" +
	"\x11short_description\x18\b \x01(\bBH\x82\xb5\x18DIf true, return a short description instead of the full description.R\x10shortDescription\"\xa2\x15\n" +
	"\x14PublishedFileDetails\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12(\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x04R\x0fpublishedfileid\x12\x18\n" +
	"\acreator\x18\x03 \x01(\x06R\acreator\x12#\n" +
	"\rcreator_appid\x18\x04 \x01(\rR\fcreatorAppid\x12%\n" +
	"\x0econsumer_appid\x18\x05 \x01(\rR\rconsumerAppid\x12/\n" +
	"\x13consumer_shortcutid\x18\x06 \x01(\rR\x12consumerShortcutid\x12\x1a\n" +
	"\bfilename\x18\a \x01(\tR\bfilename\x12\x1b\n" +
	"\tfile_size\x18\b \x01(\x04R\bfileSize\x12*\n" +
	"\x11preview_file_size\x18\t \x01(\x04R\x0fpreviewFileSize\x12\x19\n" +
	"\bfile_url\x18\n" +
	" \x01(\tR\afileUrl\x12\x1f\n" +
	"\vpreview_url\x18\v \x01(\tR\n" +
	"previewUrl\x12&\n" +
	"\x0eyoutubevideoid\x18\f \x01(\tR\x0eyoutubevideoid\x12\x10\n" +
	"\x03url\x18\r \x01(\tR\x03url\x12#\n" +
	"\rhcontent_file\x18\x0e \x01(\x06R\fhcontentFile\x12)\n" +
	"\x10hcontent_preview\x18\x0f \x01(\x06R\x0fhcontentPreview\x12\x14\n" +
	"\x05title\x18\x10 \x01(\tR\x05title\x12)\n" +
	"\x10file_description\x18\x11 \x01(\tR\x0ffileDescription\x12+\n" +
	"\x11short_description\x18\x12 \x01(\tR\x10shortDescription\x12!\n" +
	"\ftime_created\x18\x13 \x01(\rR\vtimeCreated\x12!\n" +
	"\ftime_updated\x18\x14 \x01(\rR\vtimeUpdated\x12\x1e\n" +
	"\n" +
	"visibility\x18\x15 \x01(\rR\n" +
	"visibility\x12\x14\n" +
	"\x05flags\x18\x16 \x01(\rR\x05flags\x12#\n" +
	"\rworkshop_file\x18\x17 \x01(\bR\fworkshopFile\x12+\n" +
	"\x11workshop_accepted\x18\x18 \x01(\bR\x10workshopAccepted\x12,\n" +
	"\x12show_subscribe_all\x18\x19 \x01(\bR\x10showSubscribeAll\x124\n" +
	"\x16num_comments_developer\x18\x1a \x01(\x05R\x14numCommentsDeveloper\x12.\n" +
	"\x13num_comments_public\x18\x1b \x01(\x05R\x11numCommentsPublic\x12\x16\n" +
	"\x06banned\x18\x1c \x01(\bR\x06banned\x12\x1d\n" +
	"\n" +
	"ban_reason\x18\x1d \x01(\tR\tbanReason\x12\x16\n" +
	"\x06banner\x18\x1e \x01(\x06R\x06banner\x12$\n" +
	"\x0ecan_be_deleted\x18\x1f \x01(\bR\fcanBeDeleted\x12\"\n" +
	"\fincompatible\x18  \x01(\bR\fincompatible\x12\x19\n" +
	"\bapp_name\x18! \x01(\tR\aappName\x12\x1b\n" +
	"\tfile_type\x18\" \x01(\rR\bfileType\x12#\n" +
	"\rcan_subscribe\x18# \x01(\bR\fcanSubscribe\x12$\n" +
	"\rsubscriptions\x18$ \x01(\rR\rsubscriptions\x12\x1c\n" +
	"\tfavorited\x18% \x01(\rR\tfavorited\x12\x1c\n" +
	"\tfollowers\x18& \x01(\rR\tfollowers\x125\n" +
	"\x16lifetime_subscriptions\x18' \x01(\rR\x15lifetimeSubscriptions\x12-\n" +
	"\x12lifetime_favorited\x18( \x01(\rR\x11lifetimeFavorited\x12-\n" +
	"\x12lifetime_followers\x18) \x01(\rR\x11lifetimeFollowers\x12\x14\n" +
	"\x05views\x18* \x01(\rR\x05views\x12\x1f\n" +
	"\vimage_width\x18+ \x01(\rR\n" +
	"imageWidth\x12!\n" +
	"\fimage_height\x18, \x01(\rR\vimageHeight\x12\x1b\n" +
	"\timage_url\x18- \x01(\tR\bimageUrl\x12\x1f\n" +
	"\vspoiler_tag\x18. \x01(\bR\n" +
	"spoilerTag\x12\x1e\n" +
	"\n" +
	"shortcutid\x18/ \x01(\rR\n" +
	"shortcutid\x12\"\n" +
	"\fshortcutname\x180 \x01(\tR\fshortcutname\x12!\n" +
	"\fnum_children\x181 \x01(\rR\vnumChildren\x12\x1f\n" +
	"\vnum_reports\x182 \x01(\rR\n" +
	"numReports\x12B\n" +
	"\bpreviews\x183 \x03(\v2&.deadlock.PublishedFileDetails.PreviewR\bpreviews\x126\n" +
	"\x04tags\x184 \x03(\v2\".deadlock.PublishedFileDetails.TagR\x04tags\x12@\n" +
	"\bchildren\x185 \x03(\v2$.deadlock.PublishedFileDetails.ChildR\bchildren\x12<\n" +
	"\x06kvtags\x186 \x03(\v2$.deadlock.PublishedFileDetails.KVTagR\x06kvtags\x12D\n" +
	"\tvote_data\x187 \x01(\v2'.deadlock.PublishedFileDetails.VoteDataR\bvoteData\x12\x82\x01\n" +
	"\x0ftime_subscribed\x188 \x01(\rBY\x82\xb5\x18UOnly valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail callsR\x0etimeSubscribed\x1a5\n" +
	"\x03Tag\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x1c\n" +
	"\tadminonly\x18\x02 \x01(\bR\tadminonly\x1a\xaf\x01\n" +
	"\aPreview\x12\x1c\n" +
	"\tpreviewid\x18\x01 \x01(\x04R\tpreviewid\x12\x1c\n" +
	"\tsortorder\x18\x02 \x01(\rR\tsortorder\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x12\n" +
	"\x04size\x18\x04 \x01(\rR\x04size\x12\x1a\n" +
	"\bfilename\x18\x05 \x01(\tR\bfilename\x12&\n" +
	"\x0eyoutubevideoid\x18\x06 \x01(\tR\x0eyoutubevideoid\x1al\n" +
	"\x05Child\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\x12\x1c\n" +
	"\tsortorder\x18\x02 \x01(\rR\tsortorder\x12\x1b\n" +
	"\tfile_type\x18\x03 \x01(\rR\bfileType\x1a/\n" +
	"\x05KVTag\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1aZ\n" +
	"\bVoteData\x12\x14\n" +
	"\x05score\x18\x01 \x01(\x02R\x05score\x12\x19\n" +
	"\bvotes_up\x18\x02 \x01(\rR\avotesUp\x12\x1d\n" +
	"\n" +
	"votes_down\x18\x03 \x01(\rR\tvotesDown\"x\n" +
	"\"CPublishedFile_GetDetails_Response\x12R\n" +
	"\x14publishedfiledetails\x18\x01 \x03(\v2\x1e.deadlock.PublishedFileDetailsR\x14publishedfiledetails\"\x99\a\n" +
	"#CPublishedFile_GetUserFiles_Request\x12B\n" +
	"\x05appid\x18\x01 \x01(\rB,\x82\xb5\x18(App Id to retrieve published files from.R\x05appid\x12@\n" +
	"\x04page\x18\x03 \x01(\r:\x011B)\x82\xb5\x18%(Optional) Starting page for results.R\x04page\x12\\\n" +
	"\n" +
	"numperpage\x18\x04 \x01(\r:\x011B9\x82\xb5\x185(Optional) The number of results, per page to return.R\n" +
	"numperpage\x12e\n" +
	"\n" +
	"sortmethod\x18\x06 \x01(\t:\vlastupdatedB8\x82\xb5\x184(Optional) Sorting method to use on returned values.R\n" +
	"sortmethod\x12t\n" +
	"\ttotalonly\x18\a \x01(\bBV\x82\xb5\x18R(Optional) If true, only return the total number of files that satisfy this query.R\ttotalonly\x12D\n" +
	"\aprivacy\x18\t \x01(\rB*\x82\xb5\x18&(optional) Filter by privacy settings.R\aprivacy\x12w\n" +
	"\bids_only\x18\n" +
	" \x01(\bB\\\x82\xb5\x18X(Optional) If true, only return the published file ids of files that satisfy this query.R\aidsOnly\x12v\n" +
	"\frequiredtags\x18\v \x03(\tBR\x82\xb5\x18N(Optional) Tags that must be present on a published file to satisfy the query.R\frequiredtags\x12z\n" +
	"\fexcludedtags\x18\f \x03(\tBV\x82\xb5\x18R(Optional) Tags that must NOT be present on a published file to satisfy the query.R\fexcludedtags\"\xe3\x02\n" +
	"$CPublishedFile_GetUserFiles_Response\x12\x14\n" +
	"\x05total\x18\x01 \x01(\rR\x05total\x12\x1e\n" +
	"\n" +
	"startindex\x18\x02 \x01(\rR\n" +
	"startindex\x12R\n" +
	"\x14publishedfiledetails\x18\x03 \x03(\v2\x1e.deadlock.PublishedFileDetailsR\x14publishedfiledetails\x12F\n" +
	"\x04apps\x18\x04 \x03(\v22.deadlock.CPublishedFile_GetUserFiles_Response.AppR\x04apps\x1ai\n" +
	"\x03App\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"shortcutid\x18\x03 \x01(\rR\n" +
	"shortcutid\x12\x18\n" +
	"\aprivate\x18\x04 \x01(\bR\aprivate\"\xac\x05\n" +
	"\x1dCPublishedFile_Update_Request\x12@\n" +
	"\x05appid\x18\x01 \x01(\rB*\x82\xb5\x18&App Id this published file belongs to.R\x05appid\x12]\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x06B3\x82\xb5\x18/Published file id of the file we'd like update.R\x0fpublishedfileid\x12A\n" +
	"\x05title\x18\x03 \x01(\tB+\x82\xb5\x18'(Optional) Title of the published file.R\x05title\x12\\\n" +
	"\x10file_description\x18\x04 \x01(\tB1\x82\xb5\x18-(Optional) Description of the published file.R\x0ffileDescription\x12P\n" +
	"\n" +
	"visibility\x18\x05 \x01(\rB0\x82\xb5\x18,(Optional) Visibility of the published file.R\n" +
	"visibility\x12F\n" +
	"\x04tags\x18\x06 \x03(\tB2\x82\xb5\x18.(Optional) Set of tags for the published file.R\x04tags\x12K\n" +
	"\bfilename\x18\a \x01(\tB/\x82\xb5\x18+(Optional) Filename for the published file.R\bfilename\x12b\n" +
	"\x10preview_filename\x18\b \x01(\tB7\x82\xb5\x183(Optional) Preview filename for the published file.R\x0fpreviewFilename\" \n" +
	"\x1eCPublishedFile_Update_Response\"\x88\x05\n" +
	")CPublishedFile_RefreshVotingQueue_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12T\n" +
	"\x12matching_file_type\x18\x02 \x01(\rB&\x82\xb5\x18\"EPublishedFileInfoMatchingFileTypeR\x10matchingFileType\x12r\n" +
	"\x04tags\x18\x03 \x03(\tB^\x82\xb5\x18ZInclude files that have all the tags or any of the tags if match_all_tags is set to false.R\x04tags\x12\xa3\x01\n" +
	"\x0ematch_all_tags\x18\x04 \x01(\b:\x04trueBw\x82\xb5\x18sIf true, then files must have all the tags specified.  If false, then must have at least one of the tags specified.R\fmatchAllTags\x12W\n" +
	"\rexcluded_tags\x18\x05 \x03(\tB2\x82\xb5\x18.Exclude any files that have any of these tags.R\fexcludedTags\x12|\n" +
	"\x12desired_queue_size\x18\x06 \x01(\rBN\x82\xb5\x18JDesired number of items in the voting queue.  May be clamped by the serverR\x10desiredQueueSize\",\n" +
	"*CPublishedFile_RefreshVotingQueue_Response2\x82\t\n" +
	"\rPublishedFile\x12\x93\x01\n" +
	"\tSubscribe\x12*.deadlock.CPublishedFile_Subscribe_Request\x1a+.deadlock.CPublishedFile_Subscribe_Response\"-\x82\xb5\x18)Subscribes the user to the published file\x12\x9d\x01\n" +
	"\vUnsubscribe\x12,.deadlock.CPublishedFile_Unsubscribe_Request\x1a-.deadlock.CPublishedFile_Unsubscribe_Response\"1\x82\xb5\x18-Unsubscribes the user from the published file\x12\x92\x01\n" +
	"\aPublish\x12(.deadlock.CPublishedFile_Publish_Request\x1a).deadlock.CPublishedFile_Publish_Response\"2\x82\xb5\x18.Publishes a clouded user file to the Workshop.\x12\xa2\x01\n" +
	"\n" +
	"GetDetails\x12+.deadlock.CPublishedFile_GetDetails_Request\x1a,.deadlock.CPublishedFile_GetDetails_Response\"9\x82\xb5\x185Retrieves information about a set of published files.\x12\x97\x01\n" +
	"\fGetUserFiles\x12-.deadlock.CPublishedFile_GetUserFiles_Request\x1a..deadlock.CPublishedFile_GetUserFiles_Response\"(\x82\xb5\x18$Retrieves files published by a user.\x12\x8c\x01\n" +
	"\x06Update\x12'.deadlock.CPublishedFile_Update_Request\x1a(.deadlock.CPublishedFile_Update_Response\"/\x82\xb5\x18+Updates information about a published file.\x12\xaa\x01\n" +
	"\x12RefreshVotingQueue\x123.deadlock.CPublishedFile_RefreshVotingQueue_Request\x1a4.deadlock.CPublishedFile_RefreshVotingQueue_Response\")\x82\xb5\x18%Refresh the voting queue for the user\x1a+\x82\xb5\x18'A service to access published file dataB4Z2github.com/RyPort/paradox-parser/deadlock;deadlock"

var (
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescData []byte
)

func file_steammessages_publishedfile_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_publishedfile_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_publishedfile_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_publishedfile_steamworkssdk_proto_rawDesc), len(file_steammessages_publishedfile_steamworkssdk_proto_rawDesc)))
	})
	return file_steammessages_publishedfile_steamworkssdk_proto_rawDescData
}

var file_steammessages_publishedfile_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_steammessages_publishedfile_steamworkssdk_proto_goTypes = []any{
	(*CPublishedFile_Subscribe_Request)(nil),           // 0: deadlock.CPublishedFile_Subscribe_Request
	(*CPublishedFile_Subscribe_Response)(nil),          // 1: deadlock.CPublishedFile_Subscribe_Response
	(*CPublishedFile_Unsubscribe_Request)(nil),         // 2: deadlock.CPublishedFile_Unsubscribe_Request
	(*CPublishedFile_Unsubscribe_Response)(nil),        // 3: deadlock.CPublishedFile_Unsubscribe_Response
	(*CPublishedFile_Publish_Request)(nil),             // 4: deadlock.CPublishedFile_Publish_Request
	(*CPublishedFile_Publish_Response)(nil),            // 5: deadlock.CPublishedFile_Publish_Response
	(*CPublishedFile_GetDetails_Request)(nil),          // 6: deadlock.CPublishedFile_GetDetails_Request
	(*PublishedFileDetails)(nil),                       // 7: deadlock.PublishedFileDetails
	(*CPublishedFile_GetDetails_Response)(nil),         // 8: deadlock.CPublishedFile_GetDetails_Response
	(*CPublishedFile_GetUserFiles_Request)(nil),        // 9: deadlock.CPublishedFile_GetUserFiles_Request
	(*CPublishedFile_GetUserFiles_Response)(nil),       // 10: deadlock.CPublishedFile_GetUserFiles_Response
	(*CPublishedFile_Update_Request)(nil),              // 11: deadlock.CPublishedFile_Update_Request
	(*CPublishedFile_Update_Response)(nil),             // 12: deadlock.CPublishedFile_Update_Response
	(*CPublishedFile_RefreshVotingQueue_Request)(nil),  // 13: deadlock.CPublishedFile_RefreshVotingQueue_Request
	(*CPublishedFile_RefreshVotingQueue_Response)(nil), // 14: deadlock.CPublishedFile_RefreshVotingQueue_Response
	(*PublishedFileDetails_Tag)(nil),                   // 15: deadlock.PublishedFileDetails.Tag
	(*PublishedFileDetails_Preview)(nil),               // 16: deadlock.PublishedFileDetails.Preview
	(*PublishedFileDetails_Child)(nil),                 // 17: deadlock.PublishedFileDetails.Child
	(*PublishedFileDetails_KVTag)(nil),                 // 18: deadlock.PublishedFileDetails.KVTag
	(*PublishedFileDetails_VoteData)(nil),              // 19: deadlock.PublishedFileDetails.VoteData
	(*CPublishedFile_GetUserFiles_Response_App)(nil),   // 20: deadlock.CPublishedFile_GetUserFiles_Response.App
}
var file_steammessages_publishedfile_steamworkssdk_proto_depIdxs = []int32{
	16, // 0: deadlock.PublishedFileDetails.previews:type_name -> deadlock.PublishedFileDetails.Preview
	15, // 1: deadlock.PublishedFileDetails.tags:type_name -> deadlock.PublishedFileDetails.Tag
	17, // 2: deadlock.PublishedFileDetails.children:type_name -> deadlock.PublishedFileDetails.Child
	18, // 3: deadlock.PublishedFileDetails.kvtags:type_name -> deadlock.PublishedFileDetails.KVTag
	19, // 4: deadlock.PublishedFileDetails.vote_data:type_name -> deadlock.PublishedFileDetails.VoteData
	7,  // 5: deadlock.CPublishedFile_GetDetails_Response.publishedfiledetails:type_name -> deadlock.PublishedFileDetails
	7,  // 6: deadlock.CPublishedFile_GetUserFiles_Response.publishedfiledetails:type_name -> deadlock.PublishedFileDetails
	20, // 7: deadlock.CPublishedFile_GetUserFiles_Response.apps:type_name -> deadlock.CPublishedFile_GetUserFiles_Response.App
	0,  // 8: deadlock.PublishedFile.Subscribe:input_type -> deadlock.CPublishedFile_Subscribe_Request
	2,  // 9: deadlock.PublishedFile.Unsubscribe:input_type -> deadlock.CPublishedFile_Unsubscribe_Request
	4,  // 10: deadlock.PublishedFile.Publish:input_type -> deadlock.CPublishedFile_Publish_Request
	6,  // 11: deadlock.PublishedFile.GetDetails:input_type -> deadlock.CPublishedFile_GetDetails_Request
	9,  // 12: deadlock.PublishedFile.GetUserFiles:input_type -> deadlock.CPublishedFile_GetUserFiles_Request
	11, // 13: deadlock.PublishedFile.Update:input_type -> deadlock.CPublishedFile_Update_Request
	13, // 14: deadlock.PublishedFile.RefreshVotingQueue:input_type -> deadlock.CPublishedFile_RefreshVotingQueue_Request
	1,  // 15: deadlock.PublishedFile.Subscribe:output_type -> deadlock.CPublishedFile_Subscribe_Response
	3,  // 16: deadlock.PublishedFile.Unsubscribe:output_type -> deadlock.CPublishedFile_Unsubscribe_Response
	5,  // 17: deadlock.PublishedFile.Publish:output_type -> deadlock.CPublishedFile_Publish_Response
	8,  // 18: deadlock.PublishedFile.GetDetails:output_type -> deadlock.CPublishedFile_GetDetails_Response
	10, // 19: deadlock.PublishedFile.GetUserFiles:output_type -> deadlock.CPublishedFile_GetUserFiles_Response
	12, // 20: deadlock.PublishedFile.Update:output_type -> deadlock.CPublishedFile_Update_Response
	14, // 21: deadlock.PublishedFile.RefreshVotingQueue:output_type -> deadlock.CPublishedFile_RefreshVotingQueue_Response
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_steammessages_publishedfile_steamworkssdk_proto_init() }
func file_steammessages_publishedfile_steamworkssdk_proto_init() {
	if File_steammessages_publishedfile_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_publishedfile_steamworkssdk_proto_rawDesc), len(file_steammessages_publishedfile_steamworkssdk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_publishedfile_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_publishedfile_steamworkssdk_proto_depIdxs,
		MessageInfos:      file_steammessages_publishedfile_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_publishedfile_steamworkssdk_proto = out.File
	file_steammessages_publishedfile_steamworkssdk_proto_goTypes = nil
	file_steammessages_publishedfile_steamworkssdk_proto_depIdxs = nil
}
