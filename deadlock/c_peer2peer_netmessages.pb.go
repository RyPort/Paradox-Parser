// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.6.1
// source: c_peer2peer_netmessages.proto

package deadlock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type P2P_Messages int32

const (
	P2P_Messages_p2p_TextMessage             P2P_Messages = 256
	P2P_Messages_p2p_Voice                   P2P_Messages = 257
	P2P_Messages_p2p_Ping                    P2P_Messages = 258
	P2P_Messages_p2p_VRAvatarPosition        P2P_Messages = 259
	P2P_Messages_p2p_WatchSynchronization    P2P_Messages = 260
	P2P_Messages_p2p_FightingGame_GameData   P2P_Messages = 261
	P2P_Messages_p2p_FightingGame_Connection P2P_Messages = 262
)

// Enum value maps for P2P_Messages.
var (
	P2P_Messages_name = map[int32]string{
		256: "p2p_TextMessage",
		257: "p2p_Voice",
		258: "p2p_Ping",
		259: "p2p_VRAvatarPosition",
		260: "p2p_WatchSynchronization",
		261: "p2p_FightingGame_GameData",
		262: "p2p_FightingGame_Connection",
	}
	P2P_Messages_value = map[string]int32{
		"p2p_TextMessage":             256,
		"p2p_Voice":                   257,
		"p2p_Ping":                    258,
		"p2p_VRAvatarPosition":        259,
		"p2p_WatchSynchronization":    260,
		"p2p_FightingGame_GameData":   261,
		"p2p_FightingGame_Connection": 262,
	}
)

func (x P2P_Messages) Enum() *P2P_Messages {
	p := new(P2P_Messages)
	*p = x
	return p
}

func (x P2P_Messages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (P2P_Messages) Descriptor() protoreflect.EnumDescriptor {
	return file_c_peer2peer_netmessages_proto_enumTypes[0].Descriptor()
}

func (P2P_Messages) Type() protoreflect.EnumType {
	return &file_c_peer2peer_netmessages_proto_enumTypes[0]
}

func (x P2P_Messages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *P2P_Messages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = P2P_Messages(num)
	return nil
}

// Deprecated: Use P2P_Messages.Descriptor instead.
func (P2P_Messages) EnumDescriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{0}
}

type CP2P_Voice_Handler_Flags int32

const (
	CP2P_Voice_Played_Audio CP2P_Voice_Handler_Flags = 1
)

// Enum value maps for CP2P_Voice_Handler_Flags.
var (
	CP2P_Voice_Handler_Flags_name = map[int32]string{
		1: "Played_Audio",
	}
	CP2P_Voice_Handler_Flags_value = map[string]int32{
		"Played_Audio": 1,
	}
)

func (x CP2P_Voice_Handler_Flags) Enum() *CP2P_Voice_Handler_Flags {
	p := new(CP2P_Voice_Handler_Flags)
	*p = x
	return p
}

func (x CP2P_Voice_Handler_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CP2P_Voice_Handler_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_c_peer2peer_netmessages_proto_enumTypes[1].Descriptor()
}

func (CP2P_Voice_Handler_Flags) Type() protoreflect.EnumType {
	return &file_c_peer2peer_netmessages_proto_enumTypes[1]
}

func (x CP2P_Voice_Handler_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CP2P_Voice_Handler_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CP2P_Voice_Handler_Flags(num)
	return nil
}

// Deprecated: Use CP2P_Voice_Handler_Flags.Descriptor instead.
func (CP2P_Voice_Handler_Flags) EnumDescriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{2, 0}
}

type CP2P_TextMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          []byte                 `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CP2P_TextMessage) Reset() {
	*x = CP2P_TextMessage{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_TextMessage) ProtoMessage() {}

func (x *CP2P_TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_TextMessage.ProtoReflect.Descriptor instead.
func (*CP2P_TextMessage) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CP2P_TextMessage) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type CSteam_Voice_Encoding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceData     []byte                 `protobuf:"bytes,1,opt,name=voice_data,json=voiceData" json:"voice_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteam_Voice_Encoding) Reset() {
	*x = CSteam_Voice_Encoding{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteam_Voice_Encoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteam_Voice_Encoding) ProtoMessage() {}

func (x *CSteam_Voice_Encoding) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteam_Voice_Encoding.ProtoReflect.Descriptor instead.
func (*CSteam_Voice_Encoding) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CSteam_Voice_Encoding) GetVoiceData() []byte {
	if x != nil {
		return x.VoiceData
	}
	return nil
}

type CP2P_Voice struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Audio          *CMsgVoiceAudio        `protobuf:"bytes,1,opt,name=audio" json:"audio,omitempty"`
	BroadcastGroup *uint32                `protobuf:"varint,2,opt,name=broadcast_group,json=broadcastGroup" json:"broadcast_group,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CP2P_Voice) Reset() {
	*x = CP2P_Voice{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_Voice) ProtoMessage() {}

func (x *CP2P_Voice) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_Voice.ProtoReflect.Descriptor instead.
func (*CP2P_Voice) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CP2P_Voice) GetAudio() *CMsgVoiceAudio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *CP2P_Voice) GetBroadcastGroup() uint32 {
	if x != nil && x.BroadcastGroup != nil {
		return *x.BroadcastGroup
	}
	return 0
}

type CP2P_Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SendTime      *uint64                `protobuf:"varint,1,req,name=send_time,json=sendTime" json:"send_time,omitempty"`
	IsReply       *bool                  `protobuf:"varint,2,req,name=is_reply,json=isReply" json:"is_reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CP2P_Ping) Reset() {
	*x = CP2P_Ping{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_Ping) ProtoMessage() {}

func (x *CP2P_Ping) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_Ping.ProtoReflect.Descriptor instead.
func (*CP2P_Ping) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CP2P_Ping) GetSendTime() uint64 {
	if x != nil && x.SendTime != nil {
		return *x.SendTime
	}
	return 0
}

func (x *CP2P_Ping) GetIsReply() bool {
	if x != nil && x.IsReply != nil {
		return *x.IsReply
	}
	return false
}

type CP2P_VRAvatarPosition struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	BodyParts     []*CP2P_VRAvatarPosition_COrientation `protobuf:"bytes,1,rep,name=body_parts,json=bodyParts" json:"body_parts,omitempty"`
	HatId         *int32                                `protobuf:"varint,2,opt,name=hat_id,json=hatId" json:"hat_id,omitempty"`
	SceneId       *int32                                `protobuf:"varint,3,opt,name=scene_id,json=sceneId" json:"scene_id,omitempty"`
	WorldScale    *int32                                `protobuf:"varint,4,opt,name=world_scale,json=worldScale" json:"world_scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CP2P_VRAvatarPosition) Reset() {
	*x = CP2P_VRAvatarPosition{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_VRAvatarPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_VRAvatarPosition) ProtoMessage() {}

func (x *CP2P_VRAvatarPosition) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_VRAvatarPosition.ProtoReflect.Descriptor instead.
func (*CP2P_VRAvatarPosition) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CP2P_VRAvatarPosition) GetBodyParts() []*CP2P_VRAvatarPosition_COrientation {
	if x != nil {
		return x.BodyParts
	}
	return nil
}

func (x *CP2P_VRAvatarPosition) GetHatId() int32 {
	if x != nil && x.HatId != nil {
		return *x.HatId
	}
	return 0
}

func (x *CP2P_VRAvatarPosition) GetSceneId() int32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *CP2P_VRAvatarPosition) GetWorldScale() int32 {
	if x != nil && x.WorldScale != nil {
		return *x.WorldScale
	}
	return 0
}

type CP2P_WatchSynchronization struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	DemoTick                         *int32                 `protobuf:"varint,1,opt,name=demo_tick,json=demoTick" json:"demo_tick,omitempty"`
	Paused                           *bool                  `protobuf:"varint,2,opt,name=paused" json:"paused,omitempty"`
	TvListenVoiceIndices             *uint64                `protobuf:"varint,3,opt,name=tv_listen_voice_indices,json=tvListenVoiceIndices" json:"tv_listen_voice_indices,omitempty"`
	DotaSpectatorMode                *int32                 `protobuf:"varint,4,opt,name=dota_spectator_mode,json=dotaSpectatorMode" json:"dota_spectator_mode,omitempty"`
	DotaSpectatorWatchingBroadcaster *bool                  `protobuf:"varint,5,opt,name=dota_spectator_watching_broadcaster,json=dotaSpectatorWatchingBroadcaster" json:"dota_spectator_watching_broadcaster,omitempty"`
	DotaSpectatorHeroIndex           *int32                 `protobuf:"varint,6,opt,name=dota_spectator_hero_index,json=dotaSpectatorHeroIndex" json:"dota_spectator_hero_index,omitempty"`
	DotaSpectatorAutospeed           *int32                 `protobuf:"varint,7,opt,name=dota_spectator_autospeed,json=dotaSpectatorAutospeed" json:"dota_spectator_autospeed,omitempty"`
	DotaReplaySpeed                  *int32                 `protobuf:"varint,8,opt,name=dota_replay_speed,json=dotaReplaySpeed" json:"dota_replay_speed,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CP2P_WatchSynchronization) Reset() {
	*x = CP2P_WatchSynchronization{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_WatchSynchronization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_WatchSynchronization) ProtoMessage() {}

func (x *CP2P_WatchSynchronization) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_WatchSynchronization.ProtoReflect.Descriptor instead.
func (*CP2P_WatchSynchronization) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CP2P_WatchSynchronization) GetDemoTick() int32 {
	if x != nil && x.DemoTick != nil {
		return *x.DemoTick
	}
	return 0
}

func (x *CP2P_WatchSynchronization) GetPaused() bool {
	if x != nil && x.Paused != nil {
		return *x.Paused
	}
	return false
}

func (x *CP2P_WatchSynchronization) GetTvListenVoiceIndices() uint64 {
	if x != nil && x.TvListenVoiceIndices != nil {
		return *x.TvListenVoiceIndices
	}
	return 0
}

func (x *CP2P_WatchSynchronization) GetDotaSpectatorMode() int32 {
	if x != nil && x.DotaSpectatorMode != nil {
		return *x.DotaSpectatorMode
	}
	return 0
}

func (x *CP2P_WatchSynchronization) GetDotaSpectatorWatchingBroadcaster() bool {
	if x != nil && x.DotaSpectatorWatchingBroadcaster != nil {
		return *x.DotaSpectatorWatchingBroadcaster
	}
	return false
}

func (x *CP2P_WatchSynchronization) GetDotaSpectatorHeroIndex() int32 {
	if x != nil && x.DotaSpectatorHeroIndex != nil {
		return *x.DotaSpectatorHeroIndex
	}
	return 0
}

func (x *CP2P_WatchSynchronization) GetDotaSpectatorAutospeed() int32 {
	if x != nil && x.DotaSpectatorAutospeed != nil {
		return *x.DotaSpectatorAutospeed
	}
	return 0
}

func (x *CP2P_WatchSynchronization) GetDotaReplaySpeed() int32 {
	if x != nil && x.DotaReplaySpeed != nil {
		return *x.DotaReplaySpeed
	}
	return 0
}

type CP2P_VRAvatarPosition_COrientation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pos           *CMsgVector            `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Ang           *CMsgQAngle            `protobuf:"bytes,2,opt,name=ang" json:"ang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CP2P_VRAvatarPosition_COrientation) Reset() {
	*x = CP2P_VRAvatarPosition_COrientation{}
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CP2P_VRAvatarPosition_COrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CP2P_VRAvatarPosition_COrientation) ProtoMessage() {}

func (x *CP2P_VRAvatarPosition_COrientation) ProtoReflect() protoreflect.Message {
	mi := &file_c_peer2peer_netmessages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CP2P_VRAvatarPosition_COrientation.ProtoReflect.Descriptor instead.
func (*CP2P_VRAvatarPosition_COrientation) Descriptor() ([]byte, []int) {
	return file_c_peer2peer_netmessages_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CP2P_VRAvatarPosition_COrientation) GetPos() *CMsgVector {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CP2P_VRAvatarPosition_COrientation) GetAng() *CMsgQAngle {
	if x != nil {
		return x.Ang
	}
	return nil
}

var File_c_peer2peer_netmessages_proto protoreflect.FileDescriptor

const file_c_peer2peer_netmessages_proto_rawDesc = "" +
	"\n" +
	"\x1dc_peer2peer_netmessages.proto\x12\bdeadlock\x1a\x11netmessages.proto\x1a\x16networkbasetypes.proto\"&\n" +
	"\x10CP2P_TextMessage\x12\x12\n" +
	"\x04text\x18\x01 \x01(\fR\x04text\"6\n" +
	"\x15CSteam_Voice_Encoding\x12\x1d\n" +
	"\n" +
	"voice_data\x18\x01 \x01(\fR\tvoiceData\"\x88\x01\n" +
	"\n" +
	"CP2P_Voice\x12.\n" +
	"\x05audio\x18\x01 \x01(\v2\x18.deadlock.CMsgVoiceAudioR\x05audio\x12'\n" +
	"\x0fbroadcast_group\x18\x02 \x01(\rR\x0ebroadcastGroup\"!\n" +
	"\rHandler_Flags\x12\x10\n" +
	"\fPlayed_Audio\x10\x01\"C\n" +
	"\tCP2P_Ping\x12\x1b\n" +
	"\tsend_time\x18\x01 \x02(\x04R\bsendTime\x12\x19\n" +
	"\bis_reply\x18\x02 \x02(\bR\aisReply\"\x97\x02\n" +
	"\x15CP2P_VRAvatarPosition\x12K\n" +
	"\n" +
	"body_parts\x18\x01 \x03(\v2,.deadlock.CP2P_VRAvatarPosition.COrientationR\tbodyParts\x12\x15\n" +
	"\x06hat_id\x18\x02 \x01(\x05R\x05hatId\x12\x19\n" +
	"\bscene_id\x18\x03 \x01(\x05R\asceneId\x12\x1f\n" +
	"\vworld_scale\x18\x04 \x01(\x05R\n" +
	"worldScale\x1a^\n" +
	"\fCOrientation\x12&\n" +
	"\x03pos\x18\x01 \x01(\v2\x14.deadlock.CMsgVectorR\x03pos\x12&\n" +
	"\x03ang\x18\x02 \x01(\v2\x14.deadlock.CMsgQAngleR\x03ang\"\xa7\x03\n" +
	"\x19CP2P_WatchSynchronization\x12\x1b\n" +
	"\tdemo_tick\x18\x01 \x01(\x05R\bdemoTick\x12\x16\n" +
	"\x06paused\x18\x02 \x01(\bR\x06paused\x125\n" +
	"\x17tv_listen_voice_indices\x18\x03 \x01(\x04R\x14tvListenVoiceIndices\x12.\n" +
	"\x13dota_spectator_mode\x18\x04 \x01(\x05R\x11dotaSpectatorMode\x12M\n" +
	"#dota_spectator_watching_broadcaster\x18\x05 \x01(\bR dotaSpectatorWatchingBroadcaster\x129\n" +
	"\x19dota_spectator_hero_index\x18\x06 \x01(\x05R\x16dotaSpectatorHeroIndex\x128\n" +
	"\x18dota_spectator_autospeed\x18\a \x01(\x05R\x16dotaSpectatorAutospeed\x12*\n" +
	"\x11dota_replay_speed\x18\b \x01(\x05R\x0fdotaReplaySpeed*\xbf\x01\n" +
	"\fP2P_Messages\x12\x14\n" +
	"\x0fp2p_TextMessage\x10\x80\x02\x12\x0e\n" +
	"\tp2p_Voice\x10\x81\x02\x12\r\n" +
	"\bp2p_Ping\x10\x82\x02\x12\x19\n" +
	"\x14p2p_VRAvatarPosition\x10\x83\x02\x12\x1d\n" +
	"\x18p2p_WatchSynchronization\x10\x84\x02\x12\x1e\n" +
	"\x19p2p_FightingGame_GameData\x10\x85\x02\x12 \n" +
	"\x1bp2p_FightingGame_Connection\x10\x86\x02B4Z2github.com/RyPort/paradox-parser/deadlock;deadlock"

var (
	file_c_peer2peer_netmessages_proto_rawDescOnce sync.Once
	file_c_peer2peer_netmessages_proto_rawDescData []byte
)

func file_c_peer2peer_netmessages_proto_rawDescGZIP() []byte {
	file_c_peer2peer_netmessages_proto_rawDescOnce.Do(func() {
		file_c_peer2peer_netmessages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_c_peer2peer_netmessages_proto_rawDesc), len(file_c_peer2peer_netmessages_proto_rawDesc)))
	})
	return file_c_peer2peer_netmessages_proto_rawDescData
}

var file_c_peer2peer_netmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_c_peer2peer_netmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_c_peer2peer_netmessages_proto_goTypes = []any{
	(P2P_Messages)(0),                          // 0: deadlock.P2P_Messages
	(CP2P_Voice_Handler_Flags)(0),              // 1: deadlock.CP2P_Voice.Handler_Flags
	(*CP2P_TextMessage)(nil),                   // 2: deadlock.CP2P_TextMessage
	(*CSteam_Voice_Encoding)(nil),              // 3: deadlock.CSteam_Voice_Encoding
	(*CP2P_Voice)(nil),                         // 4: deadlock.CP2P_Voice
	(*CP2P_Ping)(nil),                          // 5: deadlock.CP2P_Ping
	(*CP2P_VRAvatarPosition)(nil),              // 6: deadlock.CP2P_VRAvatarPosition
	(*CP2P_WatchSynchronization)(nil),          // 7: deadlock.CP2P_WatchSynchronization
	(*CP2P_VRAvatarPosition_COrientation)(nil), // 8: deadlock.CP2P_VRAvatarPosition.COrientation
	(*CMsgVoiceAudio)(nil),                     // 9: deadlock.CMsgVoiceAudio
	(*CMsgVector)(nil),                         // 10: deadlock.CMsgVector
	(*CMsgQAngle)(nil),                         // 11: deadlock.CMsgQAngle
}
var file_c_peer2peer_netmessages_proto_depIdxs = []int32{
	9,  // 0: deadlock.CP2P_Voice.audio:type_name -> deadlock.CMsgVoiceAudio
	8,  // 1: deadlock.CP2P_VRAvatarPosition.body_parts:type_name -> deadlock.CP2P_VRAvatarPosition.COrientation
	10, // 2: deadlock.CP2P_VRAvatarPosition.COrientation.pos:type_name -> deadlock.CMsgVector
	11, // 3: deadlock.CP2P_VRAvatarPosition.COrientation.ang:type_name -> deadlock.CMsgQAngle
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_c_peer2peer_netmessages_proto_init() }
func file_c_peer2peer_netmessages_proto_init() {
	if File_c_peer2peer_netmessages_proto != nil {
		return
	}
	file_netmessages_proto_init()
	file_networkbasetypes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_c_peer2peer_netmessages_proto_rawDesc), len(file_c_peer2peer_netmessages_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_c_peer2peer_netmessages_proto_goTypes,
		DependencyIndexes: file_c_peer2peer_netmessages_proto_depIdxs,
		EnumInfos:         file_c_peer2peer_netmessages_proto_enumTypes,
		MessageInfos:      file_c_peer2peer_netmessages_proto_msgTypes,
	}.Build()
	File_c_peer2peer_netmessages_proto = out.File
	file_c_peer2peer_netmessages_proto_goTypes = nil
	file_c_peer2peer_netmessages_proto_depIdxs = nil
}
