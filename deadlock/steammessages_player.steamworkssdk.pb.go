// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.6.1
// source: steammessages_player.steamworkssdk.proto

package deadlock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ENotificationSetting int32

const (
	ENotificationSetting_k_ENotificationSettingNotifyUseDefault ENotificationSetting = 0
	ENotificationSetting_k_ENotificationSettingAlways           ENotificationSetting = 1
	ENotificationSetting_k_ENotificationSettingNever            ENotificationSetting = 2
)

// Enum value maps for ENotificationSetting.
var (
	ENotificationSetting_name = map[int32]string{
		0: "k_ENotificationSettingNotifyUseDefault",
		1: "k_ENotificationSettingAlways",
		2: "k_ENotificationSettingNever",
	}
	ENotificationSetting_value = map[string]int32{
		"k_ENotificationSettingNotifyUseDefault": 0,
		"k_ENotificationSettingAlways":           1,
		"k_ENotificationSettingNever":            2,
	}
)

func (x ENotificationSetting) Enum() *ENotificationSetting {
	p := new(ENotificationSetting)
	*p = x
	return p
}

func (x ENotificationSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENotificationSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_player_steamworkssdk_proto_enumTypes[0].Descriptor()
}

func (ENotificationSetting) Type() protoreflect.EnumType {
	return &file_steammessages_player_steamworkssdk_proto_enumTypes[0]
}

func (x ENotificationSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENotificationSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENotificationSetting(num)
	return nil
}

// Deprecated: Use ENotificationSetting.Descriptor instead.
func (ENotificationSetting) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

type CPlayer_GetMutualFriendsForIncomingInvites_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

type CPlayer_IncomingInviteMutualFriendList struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Steamid                *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MutualFriendAccountIds []uint32               `protobuf:"varint,2,rep,name=mutual_friend_account_ids,json=mutualFriendAccountIds" json:"mutual_friend_account_ids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CPlayer_IncomingInviteMutualFriendList) Reset() {
	*x = CPlayer_IncomingInviteMutualFriendList{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IncomingInviteMutualFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IncomingInviteMutualFriendList) ProtoMessage() {}

func (x *CPlayer_IncomingInviteMutualFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IncomingInviteMutualFriendList.ProtoReflect.Descriptor instead.
func (*CPlayer_IncomingInviteMutualFriendList) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IncomingInviteMutualFriendList) GetMutualFriendAccountIds() []uint32 {
	if x != nil {
		return x.MutualFriendAccountIds
	}
	return nil
}

type CPlayer_GetMutualFriendsForIncomingInvites_Response struct {
	state                            protoimpl.MessageState                    `protogen:"open.v1"`
	IncomingInviteMutualFriendsLists []*CPlayer_IncomingInviteMutualFriendList `protobuf:"bytes,1,rep,name=incoming_invite_mutual_friends_lists,json=incomingInviteMutualFriendsLists" json:"incoming_invite_mutual_friends_lists,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) Reset() {
	*x = CPlayer_GetMutualFriendsForIncomingInvites_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoMessage() {}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetMutualFriendsForIncomingInvites_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetMutualFriendsForIncomingInvites_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CPlayer_GetMutualFriendsForIncomingInvites_Response) GetIncomingInviteMutualFriendsLists() []*CPlayer_IncomingInviteMutualFriendList {
	if x != nil {
		return x.IncomingInviteMutualFriendsLists
	}
	return nil
}

type CPlayer_GetFriendsGameplayInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Request) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

func (x *CPlayer_GetFriendsGameplayInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response struct {
	state          protoimpl.MessageState                                         `protogen:"open.v1"`
	YourInfo       *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo       `protobuf:"bytes,1,opt,name=your_info,json=yourInfo" json:"your_info,omitempty"`
	InGame         []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,2,rep,name=in_game,json=inGame" json:"in_game,omitempty"`
	PlayedRecently []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,3,rep,name=played_recently,json=playedRecently" json:"played_recently,omitempty"`
	PlayedEver     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,4,rep,name=played_ever,json=playedEver" json:"played_ever,omitempty"`
	Owns           []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,5,rep,name=owns" json:"owns,omitempty"`
	InWishlist     []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo `protobuf:"bytes,6,rep,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetYourInfo() *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo {
	if x != nil {
		return x.YourInfo
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInGame() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InGame
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedRecently() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedRecently
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetPlayedEver() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.PlayedEver
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetOwns() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.Owns
	}
	return nil
}

func (x *CPlayer_GetFriendsGameplayInfo_Response) GetInWishlist() []*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo {
	if x != nil {
		return x.InWishlist
	}
	return nil
}

type CPlayer_GetGameBadgeLevels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Request) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Request) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CPlayer_GetGameBadgeLevels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPlayer_GetGameBadgeLevels_Response struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	PlayerLevel   *uint32                                      `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	Badges        []*CPlayer_GetGameBadgeLevels_Response_Badge `protobuf:"bytes,2,rep,name=badges" json:"badges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Response) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response) GetBadges() []*CPlayer_GetGameBadgeLevels_Response_Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

type CPlayer_GetLastPlayedTimes_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinLastPlayed *uint32                `protobuf:"varint,1,opt,name=min_last_played,json=minLastPlayed" json:"min_last_played,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Request) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Request) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *CPlayer_GetLastPlayedTimes_Request) GetMinLastPlayed() uint32 {
	if x != nil && x.MinLastPlayed != nil {
		return *x.MinLastPlayed
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Games         []*CPlayer_GetLastPlayedTimes_Response_Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Response) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

func (x *CPlayer_GetLastPlayedTimes_Response) GetGames() []*CPlayer_GetLastPlayedTimes_Response_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type CPlayer_AcceptSSA_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AcceptSSA_Request) Reset() {
	*x = CPlayer_AcceptSSA_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AcceptSSA_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Request) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{9}
}

type CPlayer_AcceptSSA_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AcceptSSA_Response) Reset() {
	*x = CPlayer_AcceptSSA_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AcceptSSA_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AcceptSSA_Response) ProtoMessage() {}

func (x *CPlayer_AcceptSSA_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AcceptSSA_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AcceptSSA_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{10}
}

type CPlayer_GetNicknameList_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Request) Reset() {
	*x = CPlayer_GetNicknameList_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Request) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{11}
}

type CPlayer_GetNicknameList_Response struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Nicknames     []*CPlayer_GetNicknameList_Response_PlayerNickname `protobuf:"bytes,1,rep,name=nicknames" json:"nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Response) Reset() {
	*x = CPlayer_GetNicknameList_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{12}
}

func (x *CPlayer_GetNicknameList_Response) GetNicknames() []*CPlayer_GetNicknameList_Response_PlayerNickname {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type CPlayer_GetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{13}
}

type PerFriendPreferences struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Accountid                 *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname                  *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	NotificationsShowingame   *ENotificationSetting  `protobuf:"varint,3,opt,name=notifications_showingame,json=notificationsShowingame,enum=deadlock.ENotificationSetting,def=0" json:"notifications_showingame,omitempty"`
	NotificationsShowonline   *ENotificationSetting  `protobuf:"varint,4,opt,name=notifications_showonline,json=notificationsShowonline,enum=deadlock.ENotificationSetting,def=0" json:"notifications_showonline,omitempty"`
	NotificationsShowmessages *ENotificationSetting  `protobuf:"varint,5,opt,name=notifications_showmessages,json=notificationsShowmessages,enum=deadlock.ENotificationSetting,def=0" json:"notifications_showmessages,omitempty"`
	SoundsShowingame          *ENotificationSetting  `protobuf:"varint,6,opt,name=sounds_showingame,json=soundsShowingame,enum=deadlock.ENotificationSetting,def=0" json:"sounds_showingame,omitempty"`
	SoundsShowonline          *ENotificationSetting  `protobuf:"varint,7,opt,name=sounds_showonline,json=soundsShowonline,enum=deadlock.ENotificationSetting,def=0" json:"sounds_showonline,omitempty"`
	SoundsShowmessages        *ENotificationSetting  `protobuf:"varint,8,opt,name=sounds_showmessages,json=soundsShowmessages,enum=deadlock.ENotificationSetting,def=0" json:"sounds_showmessages,omitempty"`
	NotificationsSendmobile   *ENotificationSetting  `protobuf:"varint,9,opt,name=notifications_sendmobile,json=notificationsSendmobile,enum=deadlock.ENotificationSetting,def=0" json:"notifications_sendmobile,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for PerFriendPreferences fields.
const (
	Default_PerFriendPreferences_NotificationsShowingame   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowonline   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsShowmessages = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowingame          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowonline          = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_SoundsShowmessages        = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
	Default_PerFriendPreferences_NotificationsSendmobile   = ENotificationSetting_k_ENotificationSettingNotifyUseDefault
)

func (x *PerFriendPreferences) Reset() {
	*x = PerFriendPreferences{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerFriendPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFriendPreferences) ProtoMessage() {}

func (x *PerFriendPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFriendPreferences.ProtoReflect.Descriptor instead.
func (*PerFriendPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{14}
}

func (x *PerFriendPreferences) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *PerFriendPreferences) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *PerFriendPreferences) GetNotificationsShowingame() ENotificationSetting {
	if x != nil && x.NotificationsShowingame != nil {
		return *x.NotificationsShowingame
	}
	return Default_PerFriendPreferences_NotificationsShowingame
}

func (x *PerFriendPreferences) GetNotificationsShowonline() ENotificationSetting {
	if x != nil && x.NotificationsShowonline != nil {
		return *x.NotificationsShowonline
	}
	return Default_PerFriendPreferences_NotificationsShowonline
}

func (x *PerFriendPreferences) GetNotificationsShowmessages() ENotificationSetting {
	if x != nil && x.NotificationsShowmessages != nil {
		return *x.NotificationsShowmessages
	}
	return Default_PerFriendPreferences_NotificationsShowmessages
}

func (x *PerFriendPreferences) GetSoundsShowingame() ENotificationSetting {
	if x != nil && x.SoundsShowingame != nil {
		return *x.SoundsShowingame
	}
	return Default_PerFriendPreferences_SoundsShowingame
}

func (x *PerFriendPreferences) GetSoundsShowonline() ENotificationSetting {
	if x != nil && x.SoundsShowonline != nil {
		return *x.SoundsShowonline
	}
	return Default_PerFriendPreferences_SoundsShowonline
}

func (x *PerFriendPreferences) GetSoundsShowmessages() ENotificationSetting {
	if x != nil && x.SoundsShowmessages != nil {
		return *x.SoundsShowmessages
	}
	return Default_PerFriendPreferences_SoundsShowmessages
}

func (x *PerFriendPreferences) GetNotificationsSendmobile() ENotificationSetting {
	if x != nil && x.NotificationsSendmobile != nil {
		return *x.NotificationsSendmobile
	}
	return Default_PerFriendPreferences_NotificationsSendmobile
}

type CPlayer_GetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Preferences   []*PerFriendPreferences `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_GetPerFriendPreferences_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{15}
}

func (x *CPlayer_GetPerFriendPreferences_Response) GetPreferences() []*PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Preferences   *PerFriendPreferences  `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetPerFriendPreferences_Request) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetPerFriendPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{16}
}

func (x *CPlayer_SetPerFriendPreferences_Request) GetPreferences() *PerFriendPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetPerFriendPreferences_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetPerFriendPreferences_Response) Reset() {
	*x = CPlayer_SetPerFriendPreferences_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetPerFriendPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetPerFriendPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetPerFriendPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetPerFriendPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetPerFriendPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{17}
}

type CPlayer_AddFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_AddFriend_Request) Reset() {
	*x = CPlayer_AddFriend_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AddFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Request) ProtoMessage() {}

func (x *CPlayer_AddFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{18}
}

func (x *CPlayer_AddFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_AddFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InviteSent         *bool                  `protobuf:"varint,1,opt,name=invite_sent,json=inviteSent" json:"invite_sent,omitempty"`
	FriendRelationship *uint32                `protobuf:"varint,2,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_AddFriend_Response) Reset() {
	*x = CPlayer_AddFriend_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_AddFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_AddFriend_Response) ProtoMessage() {}

func (x *CPlayer_AddFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_AddFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_AddFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{19}
}

func (x *CPlayer_AddFriend_Response) GetInviteSent() bool {
	if x != nil && x.InviteSent != nil {
		return *x.InviteSent
	}
	return false
}

func (x *CPlayer_AddFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_RemoveFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_RemoveFriend_Request) Reset() {
	*x = CPlayer_RemoveFriend_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_RemoveFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Request) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{20}
}

func (x *CPlayer_RemoveFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CPlayer_RemoveFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FriendRelationship *uint32                `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_RemoveFriend_Response) Reset() {
	*x = CPlayer_RemoveFriend_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_RemoveFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_RemoveFriend_Response) ProtoMessage() {}

func (x *CPlayer_RemoveFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_RemoveFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_RemoveFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{21}
}

func (x *CPlayer_RemoveFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_IgnoreFriend_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Unignore      *bool                  `protobuf:"varint,2,opt,name=unignore" json:"unignore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_IgnoreFriend_Request) Reset() {
	*x = CPlayer_IgnoreFriend_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IgnoreFriend_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Request) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{22}
}

func (x *CPlayer_IgnoreFriend_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_IgnoreFriend_Request) GetUnignore() bool {
	if x != nil && x.Unignore != nil {
		return *x.Unignore
	}
	return false
}

type CPlayer_IgnoreFriend_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FriendRelationship *uint32                `protobuf:"varint,1,opt,name=friend_relationship,json=friendRelationship" json:"friend_relationship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CPlayer_IgnoreFriend_Response) Reset() {
	*x = CPlayer_IgnoreFriend_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_IgnoreFriend_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_IgnoreFriend_Response) ProtoMessage() {}

func (x *CPlayer_IgnoreFriend_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_IgnoreFriend_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_IgnoreFriend_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{23}
}

func (x *CPlayer_IgnoreFriend_Response) GetFriendRelationship() uint32 {
	if x != nil && x.FriendRelationship != nil {
		return *x.FriendRelationship
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetCommunityPreferences_Request) Reset() {
	*x = CPlayer_GetCommunityPreferences_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{24}
}

type CPlayer_CommunityPreferences struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HideAdultContentViolence *bool                  `protobuf:"varint,1,opt,name=hide_adult_content_violence,json=hideAdultContentViolence,def=1" json:"hide_adult_content_violence,omitempty"`
	HideAdultContentSex      *bool                  `protobuf:"varint,2,opt,name=hide_adult_content_sex,json=hideAdultContentSex,def=1" json:"hide_adult_content_sex,omitempty"`
	ParenthesizeNicknames    *bool                  `protobuf:"varint,4,opt,name=parenthesize_nicknames,json=parenthesizeNicknames,def=0" json:"parenthesize_nicknames,omitempty"`
	TimestampUpdated         *uint32                `protobuf:"varint,3,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CPlayer_CommunityPreferences fields.
const (
	Default_CPlayer_CommunityPreferences_HideAdultContentViolence = bool(true)
	Default_CPlayer_CommunityPreferences_HideAdultContentSex      = bool(true)
	Default_CPlayer_CommunityPreferences_ParenthesizeNicknames    = bool(false)
)

func (x *CPlayer_CommunityPreferences) Reset() {
	*x = CPlayer_CommunityPreferences{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_CommunityPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_CommunityPreferences) ProtoMessage() {}

func (x *CPlayer_CommunityPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_CommunityPreferences.ProtoReflect.Descriptor instead.
func (*CPlayer_CommunityPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{25}
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentViolence() bool {
	if x != nil && x.HideAdultContentViolence != nil {
		return *x.HideAdultContentViolence
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentViolence
}

func (x *CPlayer_CommunityPreferences) GetHideAdultContentSex() bool {
	if x != nil && x.HideAdultContentSex != nil {
		return *x.HideAdultContentSex
	}
	return Default_CPlayer_CommunityPreferences_HideAdultContentSex
}

func (x *CPlayer_CommunityPreferences) GetParenthesizeNicknames() bool {
	if x != nil && x.ParenthesizeNicknames != nil {
		return *x.ParenthesizeNicknames
	}
	return Default_CPlayer_CommunityPreferences_ParenthesizeNicknames
}

func (x *CPlayer_CommunityPreferences) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

type CPlayer_GetCommunityPreferences_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Preferences   *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetCommunityPreferences_Response) Reset() {
	*x = CPlayer_GetCommunityPreferences_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_GetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{26}
}

func (x *CPlayer_GetCommunityPreferences_Response) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Request struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Preferences   *CPlayer_CommunityPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetCommunityPreferences_Request) Reset() {
	*x = CPlayer_SetCommunityPreferences_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetCommunityPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Request) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{27}
}

func (x *CPlayer_SetCommunityPreferences_Request) GetPreferences() *CPlayer_CommunityPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CPlayer_SetCommunityPreferences_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_SetCommunityPreferences_Response) Reset() {
	*x = CPlayer_SetCommunityPreferences_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_SetCommunityPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_SetCommunityPreferences_Response) ProtoMessage() {}

func (x *CPlayer_SetCommunityPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_SetCommunityPreferences_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_SetCommunityPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{28}
}

type CPlayer_GetNewSteamAnnouncementState_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *int32                 `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Request) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{29}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPlayer_GetNewSteamAnnouncementState_Response struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	State                *int32                 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	AnnouncementHeadline *string                `protobuf:"bytes,2,opt,name=announcement_headline,json=announcementHeadline" json:"announcement_headline,omitempty"`
	AnnouncementUrl      *string                `protobuf:"bytes,3,opt,name=announcement_url,json=announcementUrl" json:"announcement_url,omitempty"`
	TimePosted           *uint32                `protobuf:"varint,4,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	AnnouncementGid      *uint64                `protobuf:"varint,5,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) Reset() {
	*x = CPlayer_GetNewSteamAnnouncementState_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNewSteamAnnouncementState_Response) ProtoMessage() {}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNewSteamAnnouncementState_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNewSteamAnnouncementState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{30}
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementHeadline() string {
	if x != nil && x.AnnouncementHeadline != nil {
		return *x.AnnouncementHeadline
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementUrl() string {
	if x != nil && x.AnnouncementUrl != nil {
		return *x.AnnouncementUrl
	}
	return ""
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

func (x *CPlayer_GetNewSteamAnnouncementState_Response) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AnnouncementGid *uint64                `protobuf:"varint,1,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	TimePosted      *uint32                `protobuf:"varint,2,opt,name=time_posted,json=timePosted" json:"time_posted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Request{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Request.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{31}
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Request) GetTimePosted() uint32 {
	if x != nil && x.TimePosted != nil {
		return *x.TimePosted
	}
	return 0
}

type CPlayer_UpdateSteamAnnouncementLastRead_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) Reset() {
	*x = CPlayer_UpdateSteamAnnouncementLastRead_Response{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoMessage() {}

func (x *CPlayer_UpdateSteamAnnouncementLastRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_UpdateSteamAnnouncementLastRead_Response.ProtoReflect.Descriptor instead.
func (*CPlayer_UpdateSteamAnnouncementLastRead_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{32}
}

type CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Steamid              *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32                `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32                `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

type CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Steamid              *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	MinutesPlayed        *uint32                `protobuf:"varint,2,opt,name=minutes_played,json=minutesPlayed" json:"minutes_played,omitempty"`
	MinutesPlayedForever *uint32                `protobuf:"varint,3,opt,name=minutes_played_forever,json=minutesPlayedForever" json:"minutes_played_forever,omitempty"`
	InWishlist           *bool                  `protobuf:"varint,4,opt,name=in_wishlist,json=inWishlist" json:"in_wishlist,omitempty"`
	Owned                *bool                  `protobuf:"varint,5,opt,name=owned" json:"owned,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Reset() {
	*x = CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoMessage() {}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo.ProtoReflect.Descriptor instead.
func (*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayed() uint32 {
	if x != nil && x.MinutesPlayed != nil {
		return *x.MinutesPlayed
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetMinutesPlayedForever() uint32 {
	if x != nil && x.MinutesPlayedForever != nil {
		return *x.MinutesPlayedForever
	}
	return 0
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetInWishlist() bool {
	if x != nil && x.InWishlist != nil {
		return *x.InWishlist
	}
	return false
}

func (x *CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type CPlayer_GetGameBadgeLevels_Response_Badge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         *int32                 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Series        *int32                 `protobuf:"varint,2,opt,name=series" json:"series,omitempty"`
	BorderColor   *uint32                `protobuf:"varint,3,opt,name=border_color,json=borderColor" json:"border_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) Reset() {
	*x = CPlayer_GetGameBadgeLevels_Response_Badge{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetGameBadgeLevels_Response_Badge) ProtoMessage() {}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetGameBadgeLevels_Response_Badge.ProtoReflect.Descriptor instead.
func (*CPlayer_GetGameBadgeLevels_Response_Badge) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetSeries() int32 {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return 0
}

func (x *CPlayer_GetGameBadgeLevels_Response_Badge) GetBorderColor() uint32 {
	if x != nil && x.BorderColor != nil {
		return *x.BorderColor
	}
	return 0
}

type CPlayer_GetLastPlayedTimes_Response_Game struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *int32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastPlaytime    *uint32                `protobuf:"varint,2,opt,name=last_playtime,json=lastPlaytime" json:"last_playtime,omitempty"`
	Playtime_2Weeks *int32                 `protobuf:"varint,3,opt,name=playtime_2weeks,json=playtime2weeks" json:"playtime_2weeks,omitempty"`
	PlaytimeForever *int32                 `protobuf:"varint,4,opt,name=playtime_forever,json=playtimeForever" json:"playtime_forever,omitempty"`
	FirstPlaytime   *uint32                `protobuf:"varint,5,opt,name=first_playtime,json=firstPlaytime" json:"first_playtime,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) Reset() {
	*x = CPlayer_GetLastPlayedTimes_Response_Game{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetLastPlayedTimes_Response_Game) ProtoMessage() {}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetLastPlayedTimes_Response_Game.ProtoReflect.Descriptor instead.
func (*CPlayer_GetLastPlayedTimes_Response_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetLastPlaytime() uint32 {
	if x != nil && x.LastPlaytime != nil {
		return *x.LastPlaytime
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytime_2Weeks() int32 {
	if x != nil && x.Playtime_2Weeks != nil {
		return *x.Playtime_2Weeks
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetPlaytimeForever() int32 {
	if x != nil && x.PlaytimeForever != nil {
		return *x.PlaytimeForever
	}
	return 0
}

func (x *CPlayer_GetLastPlayedTimes_Response_Game) GetFirstPlaytime() uint32 {
	if x != nil && x.FirstPlaytime != nil {
		return *x.FirstPlaytime
	}
	return 0
}

type CPlayer_GetNicknameList_Response_PlayerNickname struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"fixed32,1,opt,name=accountid" json:"accountid,omitempty"`
	Nickname      *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) Reset() {
	*x = CPlayer_GetNicknameList_Response_PlayerNickname{}
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPlayer_GetNicknameList_Response_PlayerNickname) ProtoMessage() {}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_player_steamworkssdk_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPlayer_GetNicknameList_Response_PlayerNickname.ProtoReflect.Descriptor instead.
func (*CPlayer_GetNicknameList_Response_PlayerNickname) Descriptor() ([]byte, []int) {
	return file_steammessages_player_steamworkssdk_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPlayer_GetNicknameList_Response_PlayerNickname) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

var File_steammessages_player_steamworkssdk_proto protoreflect.FileDescriptor

const file_steammessages_player_steamworkssdk_proto_rawDesc = "" +
	"\n" +
	"(steammessages_player.steamworkssdk.proto\x12\bdeadlock\x1a.steammessages_unified_base.steamworkssdk.proto\"4\n" +
	"2CPlayer_GetMutualFriendsForIncomingInvites_Request\"}\n" +
	"&CPlayer_IncomingInviteMutualFriendList\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x129\n" +
	"\x19mutual_friend_account_ids\x18\x02 \x03(\rR\x16mutualFriendAccountIds\"\xb8\x01\n" +
	"3CPlayer_GetMutualFriendsForIncomingInvites_Response\x12\x80\x01\n" +
	"$incoming_invite_mutual_friends_lists\x18\x01 \x03(\v20.deadlock.CPlayer_IncomingInviteMutualFriendListR incomingInviteMutualFriendsLists\">\n" +
	"&CPlayer_GetFriendsGameplayInfo_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\xd5\a\n" +
	"'CPlayer_GetFriendsGameplayInfo_Response\x12^\n" +
	"\tyour_info\x18\x01 \x01(\v2A.deadlock.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfoR\byourInfo\x12^\n" +
	"\ain_game\x18\x02 \x03(\v2E.deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x06inGame\x12n\n" +
	"\x0fplayed_recently\x18\x03 \x03(\v2E.deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x0eplayedRecently\x12f\n" +
	"\vplayed_ever\x18\x04 \x03(\v2E.deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\n" +
	"playedEver\x12Y\n" +
	"\x04owns\x18\x05 \x03(\v2E.deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\x04owns\x12f\n" +
	"\vin_wishlist\x18\x06 \x03(\v2E.deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\n" +
	"inWishlist\x1a\x8c\x01\n" +
	"\x13FriendsGameplayInfo\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12%\n" +
	"\x0eminutes_played\x18\x02 \x01(\rR\rminutesPlayed\x124\n" +
	"\x16minutes_played_forever\x18\x03 \x01(\rR\x14minutesPlayedForever\x1a\xbf\x01\n" +
	"\x0fOwnGameplayInfo\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12%\n" +
	"\x0eminutes_played\x18\x02 \x01(\rR\rminutesPlayed\x124\n" +
	"\x16minutes_played_forever\x18\x03 \x01(\rR\x14minutesPlayedForever\x12\x1f\n" +
	"\vin_wishlist\x18\x04 \x01(\bR\n" +
	"inWishlist\x12\x14\n" +
	"\x05owned\x18\x05 \x01(\bR\x05owned\":\n" +
	"\"CPlayer_GetGameBadgeLevels_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\xef\x01\n" +
	"#CPlayer_GetGameBadgeLevels_Response\x12!\n" +
	"\fplayer_level\x18\x01 \x01(\rR\vplayerLevel\x12K\n" +
	"\x06badges\x18\x02 \x03(\v23.deadlock.CPlayer_GetGameBadgeLevels_Response.BadgeR\x06badges\x1aX\n" +
	"\x05Badge\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\x16\n" +
	"\x06series\x18\x02 \x01(\x05R\x06series\x12!\n" +
	"\fborder_color\x18\x03 \x01(\rR\vborderColor\"\x91\x01\n" +
	"\"CPlayer_GetLastPlayedTimes_Request\x12k\n" +
	"\x0fmin_last_played\x18\x01 \x01(\rBC\x82\xb5\x18?The most recent last-played time the client already knows aboutR\rminLastPlayed\"\xae\x02\n" +
	"#CPlayer_GetLastPlayedTimes_Response\x12H\n" +
	"\x05games\x18\x01 \x03(\v22.deadlock.CPlayer_GetLastPlayedTimes_Response.GameR\x05games\x1a\xbc\x01\n" +
	"\x04Game\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\x05R\x05appid\x12#\n" +
	"\rlast_playtime\x18\x02 \x01(\rR\flastPlaytime\x12'\n" +
	"\x0fplaytime_2weeks\x18\x03 \x01(\x05R\x0eplaytime2weeks\x12)\n" +
	"\x10playtime_forever\x18\x04 \x01(\x05R\x0fplaytimeForever\x12%\n" +
	"\x0efirst_playtime\x18\x05 \x01(\rR\rfirstPlaytime\"\x1b\n" +
	"\x19CPlayer_AcceptSSA_Request\"\x1c\n" +
	"\x1aCPlayer_AcceptSSA_Response\"!\n" +
	"\x1fCPlayer_GetNicknameList_Request\"\xc7\x01\n" +
	" CPlayer_GetNicknameList_Response\x12W\n" +
	"\tnicknames\x18\x01 \x03(\v29.deadlock.CPlayer_GetNicknameList_Response.PlayerNicknameR\tnicknames\x1aJ\n" +
	"\x0ePlayerNickname\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\")\n" +
	"'CPlayer_GetPerFriendPreferences_Request\"\xc7\a\n" +
	"\x14PerFriendPreferences\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\aR\taccountid\x12\x1a\n" +
	"\bnickname\x18\x02 \x01(\tR\bnickname\x12\x81\x01\n" +
	"\x18notifications_showingame\x18\x03 \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsShowingame\x12\x81\x01\n" +
	"\x18notifications_showonline\x18\x04 \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsShowonline\x12\x85\x01\n" +
	"\x1anotifications_showmessages\x18\x05 \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x19notificationsShowmessages\x12s\n" +
	"\x11sounds_showingame\x18\x06 \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x10soundsShowingame\x12s\n" +
	"\x11sounds_showonline\x18\a \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x10soundsShowonline\x12w\n" +
	"\x13sounds_showmessages\x18\b \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x12soundsShowmessages\x12\x81\x01\n" +
	"\x18notifications_sendmobile\x18\t \x01(\x0e2\x1e.deadlock.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\x17notificationsSendmobile\"l\n" +
	"(CPlayer_GetPerFriendPreferences_Response\x12@\n" +
	"\vpreferences\x18\x01 \x03(\v2\x1e.deadlock.PerFriendPreferencesR\vpreferences\"k\n" +
	"'CPlayer_SetPerFriendPreferences_Request\x12@\n" +
	"\vpreferences\x18\x01 \x01(\v2\x1e.deadlock.PerFriendPreferencesR\vpreferences\"*\n" +
	"(CPlayer_SetPerFriendPreferences_Response\"l\n" +
	"\x19CPlayer_AddFriend_Request\x12O\n" +
	"\asteamid\x18\x01 \x01(\x06B5\x82\xb5\x181Steam ID of user to whom to send a friend invite.R\asteamid\"\x96\x02\n" +
	"\x1aCPlayer_AddFriend_Response\x12[\n" +
	"\vinvite_sent\x18\x01 \x01(\bB:\x82\xb5\x186True if the operation was successful, false otherwise.R\n" +
	"inviteSent\x12\x9a\x01\n" +
	"\x13friend_relationship\x18\x02 \x01(\rBi\x82\xb5\x18ethe resulting relationship.  Depending on state, may move directly to friends rather than invite sentR\x12friendRelationship\"[\n" +
	"\x1cCPlayer_RemoveFriend_Request\x12;\n" +
	"\asteamid\x18\x01 \x01(\x06B!\x82\xb5\x18\x1dSteam ID of friend to remove.R\asteamid\"p\n" +
	"\x1dCPlayer_RemoveFriend_Response\x12O\n" +
	"\x13friend_relationship\x18\x01 \x01(\rB\x1e\x82\xb5\x18\x1athe resulting relationshipR\x12friendRelationship\"\x92\x01\n" +
	"\x1cCPlayer_IgnoreFriend_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12X\n" +
	"\bunignore\x18\x02 \x01(\bB<\x82\xb5\x188If set, remove from ignore/block list instead of adding R\bunignore\"p\n" +
	"\x1dCPlayer_IgnoreFriend_Response\x12O\n" +
	"\x13friend_relationship\x18\x01 \x01(\rB\x1e\x82\xb5\x18\x1athe resulting relationshipR\x12friendRelationship\")\n" +
	"'CPlayer_GetCommunityPreferences_Request\"\x89\x02\n" +
	"\x1cCPlayer_CommunityPreferences\x12C\n" +
	"\x1bhide_adult_content_violence\x18\x01 \x01(\b:\x04trueR\x18hideAdultContentViolence\x129\n" +
	"\x16hide_adult_content_sex\x18\x02 \x01(\b:\x04trueR\x13hideAdultContentSex\x12<\n" +
	"\x16parenthesize_nicknames\x18\x04 \x01(\b:\x05falseR\x15parenthesizeNicknames\x12+\n" +
	"\x11timestamp_updated\x18\x03 \x01(\rR\x10timestampUpdated\"t\n" +
	"(CPlayer_GetCommunityPreferences_Response\x12H\n" +
	"\vpreferences\x18\x01 \x01(\v2&.deadlock.CPlayer_CommunityPreferencesR\vpreferences\"s\n" +
	"'CPlayer_SetCommunityPreferences_Request\x12H\n" +
	"\vpreferences\x18\x01 \x01(\v2&.deadlock.CPlayer_CommunityPreferencesR\vpreferences\"*\n" +
	"(CPlayer_SetCommunityPreferences_Response\"J\n" +
	",CPlayer_GetNewSteamAnnouncementState_Request\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\x05R\blanguage\"\xf1\x01\n" +
	"-CPlayer_GetNewSteamAnnouncementState_Response\x12\x14\n" +
	"\x05state\x18\x01 \x01(\x05R\x05state\x123\n" +
	"\x15announcement_headline\x18\x02 \x01(\tR\x14announcementHeadline\x12)\n" +
	"\x10announcement_url\x18\x03 \x01(\tR\x0fannouncementUrl\x12\x1f\n" +
	"\vtime_posted\x18\x04 \x01(\rR\n" +
	"timePosted\x12)\n" +
	"\x10announcement_gid\x18\x05 \x01(\x04R\x0fannouncementGid\"}\n" +
	"/CPlayer_UpdateSteamAnnouncementLastRead_Request\x12)\n" +
	"\x10announcement_gid\x18\x01 \x01(\x04R\x0fannouncementGid\x12\x1f\n" +
	"\vtime_posted\x18\x02 \x01(\rR\n" +
	"timePosted\"2\n" +
	"0CPlayer_UpdateSteamAnnouncementLastRead_Response*\x85\x01\n" +
	"\x14ENotificationSetting\x12*\n" +
	"&k_ENotificationSettingNotifyUseDefault\x10\x00\x12 \n" +
	"\x1ck_ENotificationSettingAlways\x10\x01\x12\x1f\n" +
	"\x1bk_ENotificationSettingNever\x10\x022\xbc\x16\n" +
	"\x06Player\x12\x81\x02\n" +
	"\"GetMutualFriendsForIncomingInvites\x12<.deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Request\x1a=.deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Response\"^\x82\xb5\x18ZGet me the mutual friends for each of my pending incoming invites (individuals and clans).\x12\xca\x01\n" +
	"\x16GetFriendsGameplayInfo\x120.deadlock.CPlayer_GetFriendsGameplayInfo_Request\x1a1.deadlock.CPlayer_GetFriendsGameplayInfo_Response\"K\x82\xb5\x18GGet a list of friends who are playing, have played, own, or want a game\x12\xc8\x01\n" +
	"\x12GetGameBadgeLevels\x12,.deadlock.CPlayer_GetGameBadgeLevels_Request\x1a-.deadlock.CPlayer_GetGameBadgeLevels_Response\"U\x82\xb5\x18QReturns the Steam Level of a user, the Badge level for the game, and if it's foil\x12\xa7\x01\n" +
	"\x18ClientGetLastPlayedTimes\x12,.deadlock.CPlayer_GetLastPlayedTimes_Request\x1a-.deadlock.CPlayer_GetLastPlayedTimes_Response\".\x82\xb5\x18*Gets the last-played times for the account\x12u\n" +
	"\tAcceptSSA\x12#.deadlock.CPlayer_AcceptSSA_Request\x1a$.deadlock.CPlayer_AcceptSSA_Response\"\x1d\x82\xb5\x18\x19User is accepting the SSA\x12\xa6\x01\n" +
	"\x0fGetNicknameList\x12).deadlock.CPlayer_GetNicknameList_Request\x1a*.deadlock.CPlayer_GetNicknameList_Response\"<\x82\xb5\x188Gets the list of nicknames this user has for other users\x12\xcf\x01\n" +
	"\x17GetPerFriendPreferences\x121.deadlock.CPlayer_GetPerFriendPreferences_Request\x1a2.deadlock.CPlayer_GetPerFriendPreferences_Response\"M\x82\xb5\x18IGets the list of per-friend preferences this user has set for other users\x12\xc9\x01\n" +
	"\x17SetPerFriendPreferences\x121.deadlock.CPlayer_SetPerFriendPreferences_Request\x1a2.deadlock.CPlayer_SetPerFriendPreferences_Response\"G\x82\xb5\x18CSets the logged in user's per-friend preferences for the given user\x12\x85\x01\n" +
	"\tAddFriend\x12#.deadlock.CPlayer_AddFriend_Request\x1a$.deadlock.CPlayer_AddFriend_Response\"-\x82\xb5\x18)Invites another Steam user to be a friend\x12\x94\x01\n" +
	"\fRemoveFriend\x12&.deadlock.CPlayer_RemoveFriend_Request\x1a'.deadlock.CPlayer_RemoveFriend_Response\"3\x82\xb5\x18/Removes a friend or ignores a friend suggestion\x12\xb8\x01\n" +
	"\fIgnoreFriend\x12&.deadlock.CPlayer_IgnoreFriend_Request\x1a'.deadlock.CPlayer_IgnoreFriend_Response\"W\x82\xb5\x18SBlocks or unblocks communication with the user.  Despite name, can be a non-friend.\x12\xb0\x01\n" +
	"\x17GetCommunityPreferences\x121.deadlock.CPlayer_GetCommunityPreferences_Request\x1a2.deadlock.CPlayer_GetCommunityPreferences_Response\".\x82\xb5\x18*Returns the player's community preferences\x12\xad\x01\n" +
	"\x17SetCommunityPreferences\x121.deadlock.CPlayer_SetCommunityPreferences_Request\x1a2.deadlock.CPlayer_SetCommunityPreferences_Response\"+\x82\xb5\x18'Sets the player's community preferences\x12\xf0\x01\n" +
	"\x1cGetNewSteamAnnouncementState\x126.deadlock.CPlayer_GetNewSteamAnnouncementState_Request\x1a7.deadlock.CPlayer_GetNewSteamAnnouncementState_Response\"_\x82\xb5\x18[Calculates and returns what to display for UI that renders new steam announcement available\x12\xce\x01\n" +
	"\x1fUpdateSteamAnnouncementLastRead\x129.deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Request\x1a:.deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Response\"4\x82\xb5\x180Marks latest announcement timestamp read by user\x1a-\x82\xb5\x18)A service for accessing Steam player dataB7Z2github.com/RyPort/paradox-parser/deadlock;deadlock\x80\x01\x01"

var (
	file_steammessages_player_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_player_steamworkssdk_proto_rawDescData []byte
)

func file_steammessages_player_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_player_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_player_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_player_steamworkssdk_proto_rawDesc), len(file_steammessages_player_steamworkssdk_proto_rawDesc)))
	})
	return file_steammessages_player_steamworkssdk_proto_rawDescData
}

var file_steammessages_player_steamworkssdk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_player_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_steammessages_player_steamworkssdk_proto_goTypes = []any{
	(ENotificationSetting)(0),                                           // 0: deadlock.ENotificationSetting
	(*CPlayer_GetMutualFriendsForIncomingInvites_Request)(nil),          // 1: deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Request
	(*CPlayer_IncomingInviteMutualFriendList)(nil),                      // 2: deadlock.CPlayer_IncomingInviteMutualFriendList
	(*CPlayer_GetMutualFriendsForIncomingInvites_Response)(nil),         // 3: deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Response
	(*CPlayer_GetFriendsGameplayInfo_Request)(nil),                      // 4: deadlock.CPlayer_GetFriendsGameplayInfo_Request
	(*CPlayer_GetFriendsGameplayInfo_Response)(nil),                     // 5: deadlock.CPlayer_GetFriendsGameplayInfo_Response
	(*CPlayer_GetGameBadgeLevels_Request)(nil),                          // 6: deadlock.CPlayer_GetGameBadgeLevels_Request
	(*CPlayer_GetGameBadgeLevels_Response)(nil),                         // 7: deadlock.CPlayer_GetGameBadgeLevels_Response
	(*CPlayer_GetLastPlayedTimes_Request)(nil),                          // 8: deadlock.CPlayer_GetLastPlayedTimes_Request
	(*CPlayer_GetLastPlayedTimes_Response)(nil),                         // 9: deadlock.CPlayer_GetLastPlayedTimes_Response
	(*CPlayer_AcceptSSA_Request)(nil),                                   // 10: deadlock.CPlayer_AcceptSSA_Request
	(*CPlayer_AcceptSSA_Response)(nil),                                  // 11: deadlock.CPlayer_AcceptSSA_Response
	(*CPlayer_GetNicknameList_Request)(nil),                             // 12: deadlock.CPlayer_GetNicknameList_Request
	(*CPlayer_GetNicknameList_Response)(nil),                            // 13: deadlock.CPlayer_GetNicknameList_Response
	(*CPlayer_GetPerFriendPreferences_Request)(nil),                     // 14: deadlock.CPlayer_GetPerFriendPreferences_Request
	(*PerFriendPreferences)(nil),                                        // 15: deadlock.PerFriendPreferences
	(*CPlayer_GetPerFriendPreferences_Response)(nil),                    // 16: deadlock.CPlayer_GetPerFriendPreferences_Response
	(*CPlayer_SetPerFriendPreferences_Request)(nil),                     // 17: deadlock.CPlayer_SetPerFriendPreferences_Request
	(*CPlayer_SetPerFriendPreferences_Response)(nil),                    // 18: deadlock.CPlayer_SetPerFriendPreferences_Response
	(*CPlayer_AddFriend_Request)(nil),                                   // 19: deadlock.CPlayer_AddFriend_Request
	(*CPlayer_AddFriend_Response)(nil),                                  // 20: deadlock.CPlayer_AddFriend_Response
	(*CPlayer_RemoveFriend_Request)(nil),                                // 21: deadlock.CPlayer_RemoveFriend_Request
	(*CPlayer_RemoveFriend_Response)(nil),                               // 22: deadlock.CPlayer_RemoveFriend_Response
	(*CPlayer_IgnoreFriend_Request)(nil),                                // 23: deadlock.CPlayer_IgnoreFriend_Request
	(*CPlayer_IgnoreFriend_Response)(nil),                               // 24: deadlock.CPlayer_IgnoreFriend_Response
	(*CPlayer_GetCommunityPreferences_Request)(nil),                     // 25: deadlock.CPlayer_GetCommunityPreferences_Request
	(*CPlayer_CommunityPreferences)(nil),                                // 26: deadlock.CPlayer_CommunityPreferences
	(*CPlayer_GetCommunityPreferences_Response)(nil),                    // 27: deadlock.CPlayer_GetCommunityPreferences_Response
	(*CPlayer_SetCommunityPreferences_Request)(nil),                     // 28: deadlock.CPlayer_SetCommunityPreferences_Request
	(*CPlayer_SetCommunityPreferences_Response)(nil),                    // 29: deadlock.CPlayer_SetCommunityPreferences_Response
	(*CPlayer_GetNewSteamAnnouncementState_Request)(nil),                // 30: deadlock.CPlayer_GetNewSteamAnnouncementState_Request
	(*CPlayer_GetNewSteamAnnouncementState_Response)(nil),               // 31: deadlock.CPlayer_GetNewSteamAnnouncementState_Response
	(*CPlayer_UpdateSteamAnnouncementLastRead_Request)(nil),             // 32: deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Request
	(*CPlayer_UpdateSteamAnnouncementLastRead_Response)(nil),            // 33: deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Response
	(*CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)(nil), // 34: deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	(*CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)(nil),     // 35: deadlock.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	(*CPlayer_GetGameBadgeLevels_Response_Badge)(nil),                   // 36: deadlock.CPlayer_GetGameBadgeLevels_Response.Badge
	(*CPlayer_GetLastPlayedTimes_Response_Game)(nil),                    // 37: deadlock.CPlayer_GetLastPlayedTimes_Response.Game
	(*CPlayer_GetNicknameList_Response_PlayerNickname)(nil),             // 38: deadlock.CPlayer_GetNicknameList_Response.PlayerNickname
}
var file_steammessages_player_steamworkssdk_proto_depIdxs = []int32{
	2,  // 0: deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists:type_name -> deadlock.CPlayer_IncomingInviteMutualFriendList
	35, // 1: deadlock.CPlayer_GetFriendsGameplayInfo_Response.your_info:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo
	34, // 2: deadlock.CPlayer_GetFriendsGameplayInfo_Response.in_game:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 3: deadlock.CPlayer_GetFriendsGameplayInfo_Response.played_recently:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 4: deadlock.CPlayer_GetFriendsGameplayInfo_Response.played_ever:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 5: deadlock.CPlayer_GetFriendsGameplayInfo_Response.owns:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	34, // 6: deadlock.CPlayer_GetFriendsGameplayInfo_Response.in_wishlist:type_name -> deadlock.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo
	36, // 7: deadlock.CPlayer_GetGameBadgeLevels_Response.badges:type_name -> deadlock.CPlayer_GetGameBadgeLevels_Response.Badge
	37, // 8: deadlock.CPlayer_GetLastPlayedTimes_Response.games:type_name -> deadlock.CPlayer_GetLastPlayedTimes_Response.Game
	38, // 9: deadlock.CPlayer_GetNicknameList_Response.nicknames:type_name -> deadlock.CPlayer_GetNicknameList_Response.PlayerNickname
	0,  // 10: deadlock.PerFriendPreferences.notifications_showingame:type_name -> deadlock.ENotificationSetting
	0,  // 11: deadlock.PerFriendPreferences.notifications_showonline:type_name -> deadlock.ENotificationSetting
	0,  // 12: deadlock.PerFriendPreferences.notifications_showmessages:type_name -> deadlock.ENotificationSetting
	0,  // 13: deadlock.PerFriendPreferences.sounds_showingame:type_name -> deadlock.ENotificationSetting
	0,  // 14: deadlock.PerFriendPreferences.sounds_showonline:type_name -> deadlock.ENotificationSetting
	0,  // 15: deadlock.PerFriendPreferences.sounds_showmessages:type_name -> deadlock.ENotificationSetting
	0,  // 16: deadlock.PerFriendPreferences.notifications_sendmobile:type_name -> deadlock.ENotificationSetting
	15, // 17: deadlock.CPlayer_GetPerFriendPreferences_Response.preferences:type_name -> deadlock.PerFriendPreferences
	15, // 18: deadlock.CPlayer_SetPerFriendPreferences_Request.preferences:type_name -> deadlock.PerFriendPreferences
	26, // 19: deadlock.CPlayer_GetCommunityPreferences_Response.preferences:type_name -> deadlock.CPlayer_CommunityPreferences
	26, // 20: deadlock.CPlayer_SetCommunityPreferences_Request.preferences:type_name -> deadlock.CPlayer_CommunityPreferences
	1,  // 21: deadlock.Player.GetMutualFriendsForIncomingInvites:input_type -> deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Request
	4,  // 22: deadlock.Player.GetFriendsGameplayInfo:input_type -> deadlock.CPlayer_GetFriendsGameplayInfo_Request
	6,  // 23: deadlock.Player.GetGameBadgeLevels:input_type -> deadlock.CPlayer_GetGameBadgeLevels_Request
	8,  // 24: deadlock.Player.ClientGetLastPlayedTimes:input_type -> deadlock.CPlayer_GetLastPlayedTimes_Request
	10, // 25: deadlock.Player.AcceptSSA:input_type -> deadlock.CPlayer_AcceptSSA_Request
	12, // 26: deadlock.Player.GetNicknameList:input_type -> deadlock.CPlayer_GetNicknameList_Request
	14, // 27: deadlock.Player.GetPerFriendPreferences:input_type -> deadlock.CPlayer_GetPerFriendPreferences_Request
	17, // 28: deadlock.Player.SetPerFriendPreferences:input_type -> deadlock.CPlayer_SetPerFriendPreferences_Request
	19, // 29: deadlock.Player.AddFriend:input_type -> deadlock.CPlayer_AddFriend_Request
	21, // 30: deadlock.Player.RemoveFriend:input_type -> deadlock.CPlayer_RemoveFriend_Request
	23, // 31: deadlock.Player.IgnoreFriend:input_type -> deadlock.CPlayer_IgnoreFriend_Request
	25, // 32: deadlock.Player.GetCommunityPreferences:input_type -> deadlock.CPlayer_GetCommunityPreferences_Request
	28, // 33: deadlock.Player.SetCommunityPreferences:input_type -> deadlock.CPlayer_SetCommunityPreferences_Request
	30, // 34: deadlock.Player.GetNewSteamAnnouncementState:input_type -> deadlock.CPlayer_GetNewSteamAnnouncementState_Request
	32, // 35: deadlock.Player.UpdateSteamAnnouncementLastRead:input_type -> deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Request
	3,  // 36: deadlock.Player.GetMutualFriendsForIncomingInvites:output_type -> deadlock.CPlayer_GetMutualFriendsForIncomingInvites_Response
	5,  // 37: deadlock.Player.GetFriendsGameplayInfo:output_type -> deadlock.CPlayer_GetFriendsGameplayInfo_Response
	7,  // 38: deadlock.Player.GetGameBadgeLevels:output_type -> deadlock.CPlayer_GetGameBadgeLevels_Response
	9,  // 39: deadlock.Player.ClientGetLastPlayedTimes:output_type -> deadlock.CPlayer_GetLastPlayedTimes_Response
	11, // 40: deadlock.Player.AcceptSSA:output_type -> deadlock.CPlayer_AcceptSSA_Response
	13, // 41: deadlock.Player.GetNicknameList:output_type -> deadlock.CPlayer_GetNicknameList_Response
	16, // 42: deadlock.Player.GetPerFriendPreferences:output_type -> deadlock.CPlayer_GetPerFriendPreferences_Response
	18, // 43: deadlock.Player.SetPerFriendPreferences:output_type -> deadlock.CPlayer_SetPerFriendPreferences_Response
	20, // 44: deadlock.Player.AddFriend:output_type -> deadlock.CPlayer_AddFriend_Response
	22, // 45: deadlock.Player.RemoveFriend:output_type -> deadlock.CPlayer_RemoveFriend_Response
	24, // 46: deadlock.Player.IgnoreFriend:output_type -> deadlock.CPlayer_IgnoreFriend_Response
	27, // 47: deadlock.Player.GetCommunityPreferences:output_type -> deadlock.CPlayer_GetCommunityPreferences_Response
	29, // 48: deadlock.Player.SetCommunityPreferences:output_type -> deadlock.CPlayer_SetCommunityPreferences_Response
	31, // 49: deadlock.Player.GetNewSteamAnnouncementState:output_type -> deadlock.CPlayer_GetNewSteamAnnouncementState_Response
	33, // 50: deadlock.Player.UpdateSteamAnnouncementLastRead:output_type -> deadlock.CPlayer_UpdateSteamAnnouncementLastRead_Response
	36, // [36:51] is the sub-list for method output_type
	21, // [21:36] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_steammessages_player_steamworkssdk_proto_init() }
func file_steammessages_player_steamworkssdk_proto_init() {
	if File_steammessages_player_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_player_steamworkssdk_proto_rawDesc), len(file_steammessages_player_steamworkssdk_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_player_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_player_steamworkssdk_proto_depIdxs,
		EnumInfos:         file_steammessages_player_steamworkssdk_proto_enumTypes,
		MessageInfos:      file_steammessages_player_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_player_steamworkssdk_proto = out.File
	file_steammessages_player_steamworkssdk_proto_goTypes = nil
	file_steammessages_player_steamworkssdk_proto_depIdxs = nil
}
