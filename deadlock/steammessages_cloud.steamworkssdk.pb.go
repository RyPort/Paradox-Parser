// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.6.1
// source: steammessages_cloud.steamworkssdk.proto

package deadlock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCloud_GetUploadServerInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetUploadServerInfo_Request) Reset() {
	*x = CCloud_GetUploadServerInfo_Request{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetUploadServerInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Request) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{0}
}

func (x *CCloud_GetUploadServerInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_GetUploadServerInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerUrl     *string                `protobuf:"bytes,1,opt,name=server_url,json=serverUrl" json:"server_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetUploadServerInfo_Response) Reset() {
	*x = CCloud_GetUploadServerInfo_Response{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetUploadServerInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetUploadServerInfo_Response) ProtoMessage() {}

func (x *CCloud_GetUploadServerInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetUploadServerInfo_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetUploadServerInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{1}
}

func (x *CCloud_GetUploadServerInfo_Response) GetServerUrl() string {
	if x != nil && x.ServerUrl != nil {
		return *x.ServerUrl
	}
	return ""
}

type CCloud_GetFileDetails_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ugcid         *uint64                `protobuf:"varint,1,opt,name=ugcid" json:"ugcid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetFileDetails_Request) Reset() {
	*x = CCloud_GetFileDetails_Request{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetFileDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Request) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Request.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{2}
}

func (x *CCloud_GetFileDetails_Request) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_GetFileDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_UserFile struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Appid          *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Ugcid          *uint64                `protobuf:"varint,2,opt,name=ugcid" json:"ugcid,omitempty"`
	Filename       *string                `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Timestamp      *uint64                `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	FileSize       *uint32                `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Url            *string                `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	SteamidCreator *uint64                `protobuf:"fixed64,7,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCloud_UserFile) Reset() {
	*x = CCloud_UserFile{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_UserFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_UserFile) ProtoMessage() {}

func (x *CCloud_UserFile) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_UserFile.ProtoReflect.Descriptor instead.
func (*CCloud_UserFile) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{3}
}

func (x *CCloud_UserFile) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_UserFile) GetUgcid() uint64 {
	if x != nil && x.Ugcid != nil {
		return *x.Ugcid
	}
	return 0
}

func (x *CCloud_UserFile) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_UserFile) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCloud_UserFile) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CCloud_UserFile) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CCloud_UserFile) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

type CCloud_GetFileDetails_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Details       *CCloud_UserFile       `protobuf:"bytes,1,opt,name=details" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_GetFileDetails_Response) Reset() {
	*x = CCloud_GetFileDetails_Response{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_GetFileDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_GetFileDetails_Response) ProtoMessage() {}

func (x *CCloud_GetFileDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_GetFileDetails_Response.ProtoReflect.Descriptor instead.
func (*CCloud_GetFileDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{4}
}

func (x *CCloud_GetFileDetails_Response) GetDetails() *CCloud_UserFile {
	if x != nil {
		return x.Details
	}
	return nil
}

type CCloud_EnumerateUserFiles_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ExtendedDetails *bool                  `protobuf:"varint,2,opt,name=extended_details,json=extendedDetails" json:"extended_details,omitempty"`
	Count           *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	StartIndex      *uint32                `protobuf:"varint,4,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserFiles_Request) Reset() {
	*x = CCloud_EnumerateUserFiles_Request{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Request) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{5}
}

func (x *CCloud_EnumerateUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetExtendedDetails() bool {
	if x != nil && x.ExtendedDetails != nil {
		return *x.ExtendedDetails
	}
	return false
}

func (x *CCloud_EnumerateUserFiles_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCloud_EnumerateUserFiles_Request) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

type CCloud_EnumerateUserFiles_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*CCloud_UserFile     `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	TotalFiles    *uint32                `protobuf:"varint,2,opt,name=total_files,json=totalFiles" json:"total_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_EnumerateUserFiles_Response) Reset() {
	*x = CCloud_EnumerateUserFiles_Response{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_EnumerateUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_EnumerateUserFiles_Response) ProtoMessage() {}

func (x *CCloud_EnumerateUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_EnumerateUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CCloud_EnumerateUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{6}
}

func (x *CCloud_EnumerateUserFiles_Response) GetFiles() []*CCloud_UserFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CCloud_EnumerateUserFiles_Response) GetTotalFiles() uint32 {
	if x != nil && x.TotalFiles != nil {
		return *x.TotalFiles
	}
	return 0
}

type CCloud_Delete_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_Delete_Request) Reset() {
	*x = CCloud_Delete_Request{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_Delete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Request) ProtoMessage() {}

func (x *CCloud_Delete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Request.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{7}
}

func (x *CCloud_Delete_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CCloud_Delete_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCloud_Delete_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCloud_Delete_Response) Reset() {
	*x = CCloud_Delete_Response{}
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCloud_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_Delete_Response) ProtoMessage() {}

func (x *CCloud_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_cloud_steamworkssdk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_Delete_Response.ProtoReflect.Descriptor instead.
func (*CCloud_Delete_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP(), []int{8}
}

var File_steammessages_cloud_steamworkssdk_proto protoreflect.FileDescriptor

const file_steammessages_cloud_steamworkssdk_proto_rawDesc = "" +
	"\n" +
	"'steammessages_cloud.steamworkssdk.proto\x12\bdeadlock\x1a.steammessages_unified_base.steamworkssdk.proto\"k\n" +
	"\"CCloud_GetUploadServerInfo_Request\x12E\n" +
	"\x05appid\x18\x01 \x01(\rB/\x82\xb5\x18+App ID to which a file will be uploaded to.R\x05appid\"D\n" +
	"#CCloud_GetUploadServerInfo_Response\x12\x1d\n" +
	"\n" +
	"server_url\x18\x01 \x01(\tR\tserverUrl\"\x9a\x01\n" +
	"\x1dCCloud_GetFileDetails_Request\x12B\n" +
	"\x05ugcid\x18\x01 \x01(\x04B,\x82\xb5\x18(ID of the Cloud file to get details for.R\x05ugcid\x125\n" +
	"\x05appid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1bApp ID the file belongs to.R\x05appid\"\xcf\x01\n" +
	"\x0fCCloud_UserFile\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x14\n" +
	"\x05ugcid\x18\x02 \x01(\x04R\x05ugcid\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x04R\ttimestamp\x12\x1b\n" +
	"\tfile_size\x18\x05 \x01(\rR\bfileSize\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url\x12'\n" +
	"\x0fsteamid_creator\x18\a \x01(\x06R\x0esteamidCreator\"U\n" +
	"\x1eCCloud_GetFileDetails_Response\x123\n" +
	"\adetails\x18\x01 \x01(\v2\x19.deadlock.CCloud_UserFileR\adetails\"\x95\x04\n" +
	"!CCloud_EnumerateUserFiles_Request\x12;\n" +
	"\x05appid\x18\x01 \x01(\rB%\x82\xb5\x18!App ID to enumerate the files of.R\x05appid\x12\xac\x01\n" +
	"\x10extended_details\x18\x02 \x01(\bB\x80\x01\x82\xb5\x18|(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found.R\x0fextendedDetails\x12\x83\x01\n" +
	"\x05count\x18\x03 \x01(\rBm\x82\xb5\x18i(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned.R\x05count\x12~\n" +
	"\vstart_index\x18\x04 \x01(\rB]\x82\xb5\x18Y(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list.R\n" +
	"startIndex\"v\n" +
	"\"CCloud_EnumerateUserFiles_Response\x12/\n" +
	"\x05files\x18\x01 \x03(\v2\x19.deadlock.CCloud_UserFileR\x05files\x12\x1f\n" +
	"\vtotal_files\x18\x02 \x01(\rR\n" +
	"totalFiles\"j\n" +
	"\x15CCloud_Delete_Request\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x125\n" +
	"\x05appid\x18\x02 \x01(\rB\x1f\x82\xb5\x18\x1bApp ID the file belongs to.R\x05appid\"\x18\n" +
	"\x16CCloud_Delete_Response2\xb6\x05\n" +
	"\x05Cloud\x12\xae\x01\n" +
	"\x13GetUploadServerInfo\x12,.deadlock.CCloud_GetUploadServerInfo_Request\x1a-.deadlock.CCloud_GetUploadServerInfo_Response\":\x82\xb5\x186Returns the URL of the proper cloud server for a user.\x12\x89\x01\n" +
	"\x0eGetFileDetails\x12'.deadlock.CCloud_GetFileDetails_Request\x1a(.deadlock.CCloud_GetFileDetails_Response\"$\x82\xb5\x18 Returns details on a Cloud file.\x12\xcc\x01\n" +
	"\x12EnumerateUserFiles\x12+.deadlock.CCloud_EnumerateUserFiles_Request\x1a,.deadlock.CCloud_EnumerateUserFiles_Response\"[\x82\xb5\x18WEnumerates Cloud files for a user of a given app ID. Returns up to 500 files at a time.\x12v\n" +
	"\x06Delete\x12\x1f.deadlock.CCloud_Delete_Request\x1a .deadlock.CCloud_Delete_Response\")\x82\xb5\x18%Deletes a file from the user's cloud.\x1a)\x82\xb5\x18%A service for Steam Cloud operations.B4Z2github.com/RyPort/paradox-parser/deadlock;deadlock"

var (
	file_steammessages_cloud_steamworkssdk_proto_rawDescOnce sync.Once
	file_steammessages_cloud_steamworkssdk_proto_rawDescData []byte
)

func file_steammessages_cloud_steamworkssdk_proto_rawDescGZIP() []byte {
	file_steammessages_cloud_steamworkssdk_proto_rawDescOnce.Do(func() {
		file_steammessages_cloud_steamworkssdk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_cloud_steamworkssdk_proto_rawDesc), len(file_steammessages_cloud_steamworkssdk_proto_rawDesc)))
	})
	return file_steammessages_cloud_steamworkssdk_proto_rawDescData
}

var file_steammessages_cloud_steamworkssdk_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_steammessages_cloud_steamworkssdk_proto_goTypes = []any{
	(*CCloud_GetUploadServerInfo_Request)(nil),  // 0: deadlock.CCloud_GetUploadServerInfo_Request
	(*CCloud_GetUploadServerInfo_Response)(nil), // 1: deadlock.CCloud_GetUploadServerInfo_Response
	(*CCloud_GetFileDetails_Request)(nil),       // 2: deadlock.CCloud_GetFileDetails_Request
	(*CCloud_UserFile)(nil),                     // 3: deadlock.CCloud_UserFile
	(*CCloud_GetFileDetails_Response)(nil),      // 4: deadlock.CCloud_GetFileDetails_Response
	(*CCloud_EnumerateUserFiles_Request)(nil),   // 5: deadlock.CCloud_EnumerateUserFiles_Request
	(*CCloud_EnumerateUserFiles_Response)(nil),  // 6: deadlock.CCloud_EnumerateUserFiles_Response
	(*CCloud_Delete_Request)(nil),               // 7: deadlock.CCloud_Delete_Request
	(*CCloud_Delete_Response)(nil),              // 8: deadlock.CCloud_Delete_Response
}
var file_steammessages_cloud_steamworkssdk_proto_depIdxs = []int32{
	3, // 0: deadlock.CCloud_GetFileDetails_Response.details:type_name -> deadlock.CCloud_UserFile
	3, // 1: deadlock.CCloud_EnumerateUserFiles_Response.files:type_name -> deadlock.CCloud_UserFile
	0, // 2: deadlock.Cloud.GetUploadServerInfo:input_type -> deadlock.CCloud_GetUploadServerInfo_Request
	2, // 3: deadlock.Cloud.GetFileDetails:input_type -> deadlock.CCloud_GetFileDetails_Request
	5, // 4: deadlock.Cloud.EnumerateUserFiles:input_type -> deadlock.CCloud_EnumerateUserFiles_Request
	7, // 5: deadlock.Cloud.Delete:input_type -> deadlock.CCloud_Delete_Request
	1, // 6: deadlock.Cloud.GetUploadServerInfo:output_type -> deadlock.CCloud_GetUploadServerInfo_Response
	4, // 7: deadlock.Cloud.GetFileDetails:output_type -> deadlock.CCloud_GetFileDetails_Response
	6, // 8: deadlock.Cloud.EnumerateUserFiles:output_type -> deadlock.CCloud_EnumerateUserFiles_Response
	8, // 9: deadlock.Cloud.Delete:output_type -> deadlock.CCloud_Delete_Response
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steammessages_cloud_steamworkssdk_proto_init() }
func file_steammessages_cloud_steamworkssdk_proto_init() {
	if File_steammessages_cloud_steamworkssdk_proto != nil {
		return
	}
	file_steammessages_unified_base_steamworkssdk_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_cloud_steamworkssdk_proto_rawDesc), len(file_steammessages_cloud_steamworkssdk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_cloud_steamworkssdk_proto_goTypes,
		DependencyIndexes: file_steammessages_cloud_steamworkssdk_proto_depIdxs,
		MessageInfos:      file_steammessages_cloud_steamworkssdk_proto_msgTypes,
	}.Build()
	File_steammessages_cloud_steamworkssdk_proto = out.File
	file_steammessages_cloud_steamworkssdk_proto_goTypes = nil
	file_steammessages_cloud_steamworkssdk_proto_depIdxs = nil
}
